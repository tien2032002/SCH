
SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004720  08004720  00014720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004840  08004840  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004840  08004840  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004840  08004840  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000070  080048b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080048b8  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4ee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4d  00000000  00000000  0002a587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d9d  00000000  00000000  0002d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc2d  00000000  00000000  0004575d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cba  00000000  00000000  0005238a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b6c  00000000  00000000  000db094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004704 	.word	0x08004704

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004704 	.word	0x08004704

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <button_reading>:
		flagForButtonPress3s[i]=0;
		counterForButtonPress3s[i]=DURATION_FOR_AUTO_INCREASING;
	}
}
int flagForPressed=0;
void button_reading ( void ){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e0ba      	b.n	8000bea <button_reading+0x182>
		if(timer1_flag==1) {
 8000a74:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <button_reading+0x194>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d105      	bne.n	8000a88 <button_reading+0x20>
			flagForPressed=0;
 8000a7c:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <button_reading+0x198>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
			setTimer1(0);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fc8e 	bl	80013a4 <setTimer1>
		}
		debounceButtonBuffer3 [i] = debounceButtonBuffer2 [i];
 8000a88:	4a5e      	ldr	r2, [pc, #376]	; (8000c04 <button_reading+0x19c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	7819      	ldrb	r1, [r3, #0]
 8000a90:	4a5d      	ldr	r2, [pc, #372]	; (8000c08 <button_reading+0x1a0>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	460a      	mov	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 8000a9a:	4a5c      	ldr	r2, [pc, #368]	; (8000c0c <button_reading+0x1a4>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	7819      	ldrb	r1, [r3, #0]
 8000aa2:	4a58      	ldr	r2, [pc, #352]	; (8000c04 <button_reading+0x19c>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin(GPIOC, BUTTON_Pin*pow(2,i));
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fca1 	bl	80003f4 <__aeabi_i2d>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000abe:	f002 ff3f 	bl	8003940 <pow>
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	4b52      	ldr	r3, [pc, #328]	; (8000c10 <button_reading+0x1a8>)
 8000ac8:	f7ff fcfe 	bl	80004c8 <__aeabi_dmul>
 8000acc:	4602      	mov	r2, r0
 8000ace:	460b      	mov	r3, r1
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f7ff ffa8 	bl	8000a28 <__aeabi_d2uiz>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	484d      	ldr	r0, [pc, #308]	; (8000c14 <button_reading+0x1ac>)
 8000ae0:	f001 f884 	bl	8001bec <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <button_reading+0x1a4>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	460a      	mov	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
		if (buttonBuffer[i]==BUTTON_IS_RELEASED) {
 8000af2:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <button_reading+0x1b0>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d109      	bne.n	8000b12 <button_reading+0xaa>
			flagForButtonPress3s[i]=0;
 8000afe:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <button_reading+0x1b4>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2100      	movs	r1, #0
 8000b04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[i]=0;
 8000b08:	4a45      	ldr	r2, [pc, #276]	; (8000c20 <button_reading+0x1b8>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i] && debounceButtonBuffer2[i]==debounceButtonBuffer3[i]) {
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <button_reading+0x1a4>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	493a      	ldr	r1, [pc, #232]	; (8000c04 <button_reading+0x19c>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	440b      	add	r3, r1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d15e      	bne.n	8000be4 <button_reading+0x17c>
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <button_reading+0x19c>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4936      	ldr	r1, [pc, #216]	; (8000c08 <button_reading+0x1a0>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	440b      	add	r3, r1
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d154      	bne.n	8000be4 <button_reading+0x17c>
			if (buttonBuffer[i] != debounceButtonBuffer3 [i]) {
 8000b3a:	4a37      	ldr	r2, [pc, #220]	; (8000c18 <button_reading+0x1b0>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	4931      	ldr	r1, [pc, #196]	; (8000c08 <button_reading+0x1a0>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	440b      	add	r3, r1
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d030      	beq.n	8000bb0 <button_reading+0x148>
				buttonBuffer [i] = debounceButtonBuffer3 [i];
 8000b4e:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <button_reading+0x1a0>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	7819      	ldrb	r1, [r3, #0]
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <button_reading+0x1b0>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
				if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000b60:	4a2d      	ldr	r2, [pc, #180]	; (8000c18 <button_reading+0x1b0>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d13b      	bne.n	8000be4 <button_reading+0x17c>
					flagForButtonPress [i]=1;
 8000b6c:	4a2d      	ldr	r2, [pc, #180]	; (8000c24 <button_reading+0x1bc>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2101      	movs	r1, #1
 8000b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPress3s [i]=DURATION_FOR_AUTO_INCREASING;
 8000b76:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <button_reading+0x1b8>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (flagForPressed==0) {
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <button_reading+0x198>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <button_reading+0x130>
						setTimer1(50);
 8000b8a:	2032      	movs	r0, #50	; 0x32
 8000b8c:	f000 fc0a 	bl	80013a4 <setTimer1>
						flagForPressed=0;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <button_reading+0x198>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e025      	b.n	8000be4 <button_reading+0x17c>
					}
					else {
						flagForButtonDoublePress[i]=1;
 8000b98:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <button_reading+0x1c0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flagForPressed=0;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <button_reading+0x198>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
						setTimer1(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fbfb 	bl	80013a4 <setTimer1>
 8000bae:	e019      	b.n	8000be4 <button_reading+0x17c>
					}
				}
			}
			else {
				if (buttonBuffer[i]==BUTTON_IS_PRESSED) {
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <button_reading+0x1b0>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d113      	bne.n	8000be4 <button_reading+0x17c>
					counterForButtonPress3s [i]--;
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <button_reading+0x1b8>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	4916      	ldr	r1, [pc, #88]	; (8000c20 <button_reading+0x1b8>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (counterForButtonPress3s[i]<=0) {
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <button_reading+0x1b8>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dc04      	bgt.n	8000be4 <button_reading+0x17c>
						flagForButtonPress3s[i]=1;
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <button_reading+0x1b4>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2101      	movs	r1, #1
 8000be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f77f af41 	ble.w	8000a74 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000460 	.word	0x20000460
 8000c00:	200000ac 	.word	0x200000ac
 8000c04:	20000094 	.word	0x20000094
 8000c08:	20000098 	.word	0x20000098
 8000c0c:	20000090 	.word	0x20000090
 8000c10:	40c00000 	.word	0x40c00000
 8000c14:	40011000 	.word	0x40011000
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	200000a0 	.word	0x200000a0
 8000c20:	200000a8 	.word	0x200000a8
 8000c24:	2000009c 	.word	0x2000009c
 8000c28:	200000a4 	.word	0x200000a4

08000c2c <blinking_led>:
void blinking_led6(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void blinking_led() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c32:	2120      	movs	r1, #32
 8000c34:	480a      	ldr	r0, [pc, #40]	; (8000c60 <blinking_led+0x34>)
 8000c36:	f001 f808 	bl	8001c4a <HAL_GPIO_TogglePin>
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 0 dispatch\r\n"), 1000);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <blinking_led+0x38>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	1d38      	adds	r0, r7, #4
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <blinking_led+0x3c>)
 8000c42:	490a      	ldr	r1, [pc, #40]	; (8000c6c <blinking_led+0x40>)
 8000c44:	f002 fa02 	bl	800304c <siprintf>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	1d39      	adds	r1, r7, #4
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <blinking_led+0x44>)
 8000c54:	f002 f85d 	bl	8002d12 <HAL_UART_Transmit>

}
 8000c58:	bf00      	nop
 8000c5a:	3738      	adds	r7, #56	; 0x38
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010800 	.word	0x40010800
 8000c64:	2000013c 	.word	0x2000013c
 8000c68:	08004720 	.word	0x08004720
 8000c6c:	08004734 	.word	0x08004734
 8000c70:	200000f8 	.word	0x200000f8

08000c74 <blinking_led1>:

void blinking_led1() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c7a:	2140      	movs	r1, #64	; 0x40
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <blinking_led1+0x34>)
 8000c7e:	f000 ffe4 	bl	8001c4a <HAL_GPIO_TogglePin>
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 1 dispatch\r\n"), 1000);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <blinking_led1+0x38>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	1d38      	adds	r0, r7, #4
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <blinking_led1+0x3c>)
 8000c8a:	490a      	ldr	r1, [pc, #40]	; (8000cb4 <blinking_led1+0x40>)
 8000c8c:	f002 f9de 	bl	800304c <siprintf>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	1d39      	adds	r1, r7, #4
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <blinking_led1+0x44>)
 8000c9c:	f002 f839 	bl	8002d12 <HAL_UART_Transmit>
}
 8000ca0:	bf00      	nop
 8000ca2:	3738      	adds	r7, #56	; 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	2000013c 	.word	0x2000013c
 8000cb0:	0800473c 	.word	0x0800473c
 8000cb4:	08004734 	.word	0x08004734
 8000cb8:	200000f8 	.word	0x200000f8

08000cbc <blinking_led2>:

void blinking_led2() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <blinking_led2+0x34>)
 8000cc6:	f000 ffc0 	bl	8001c4a <HAL_GPIO_TogglePin>
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 2 dispatch\r\n"), 1000);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <blinking_led2+0x38>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	1d38      	adds	r0, r7, #4
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <blinking_led2+0x3c>)
 8000cd2:	490a      	ldr	r1, [pc, #40]	; (8000cfc <blinking_led2+0x40>)
 8000cd4:	f002 f9ba 	bl	800304c <siprintf>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <blinking_led2+0x44>)
 8000ce4:	f002 f815 	bl	8002d12 <HAL_UART_Transmit>

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	2000013c 	.word	0x2000013c
 8000cf8:	08004750 	.word	0x08004750
 8000cfc:	08004734 	.word	0x08004734
 8000d00:	200000f8 	.word	0x200000f8

08000d04 <blinking_led3>:

void blinking_led3() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 3 dispatch\r\n"), 1000);
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <blinking_led3+0x38>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	1d38      	adds	r0, r7, #4
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <blinking_led3+0x3c>)
 8000d12:	490c      	ldr	r1, [pc, #48]	; (8000d44 <blinking_led3+0x40>)
 8000d14:	f002 f99a 	bl	800304c <siprintf>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	1d39      	adds	r1, r7, #4
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <blinking_led3+0x44>)
 8000d24:	f001 fff5 	bl	8002d12 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <blinking_led3+0x48>)
 8000d2e:	f000 ff8c 	bl	8001c4a <HAL_GPIO_TogglePin>

}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000013c 	.word	0x2000013c
 8000d40:	08004764 	.word	0x08004764
 8000d44:	08004734 	.word	0x08004734
 8000d48:	200000f8 	.word	0x200000f8
 8000d4c:	40010800 	.word	0x40010800

08000d50 <blinking_led4>:

void blinking_led4() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	; 0x38
 8000d54:	af00      	add	r7, sp, #0
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 4 dispatch\r\n"), 1000);
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <blinking_led4+0x38>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	1d38      	adds	r0, r7, #4
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <blinking_led4+0x3c>)
 8000d5e:	490c      	ldr	r1, [pc, #48]	; (8000d90 <blinking_led4+0x40>)
 8000d60:	f002 f974 	bl	800304c <siprintf>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	1d39      	adds	r1, r7, #4
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <blinking_led4+0x44>)
 8000d70:	f001 ffcf 	bl	8002d12 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <blinking_led4+0x48>)
 8000d7a:	f000 ff66 	bl	8001c4a <HAL_GPIO_TogglePin>

}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000013c 	.word	0x2000013c
 8000d8c:	08004778 	.word	0x08004778
 8000d90:	08004734 	.word	0x08004734
 8000d94:	200000f8 	.word	0x200000f8
 8000d98:	40010800 	.word	0x40010800

08000d9c <blinking_led5>:
void blinking_led5() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 5 dispatch\r\n"), 1000);
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <blinking_led5+0x38>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	1d38      	adds	r0, r7, #4
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <blinking_led5+0x3c>)
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <blinking_led5+0x40>)
 8000dac:	f002 f94e 	bl	800304c <siprintf>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <blinking_led5+0x44>)
 8000dbc:	f001 ffa9 	bl	8002d12 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <blinking_led5+0x48>)
 8000dc6:	f000 ff40 	bl	8001c4a <HAL_GPIO_TogglePin>

}
 8000dca:	bf00      	nop
 8000dcc:	3738      	adds	r7, #56	; 0x38
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000013c 	.word	0x2000013c
 8000dd8:	0800478c 	.word	0x0800478c
 8000ddc:	08004734 	.word	0x08004734
 8000de0:	200000f8 	.word	0x200000f8
 8000de4:	40010800 	.word	0x40010800

08000de8 <blinking_led6>:
void blinking_led6() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
	char str[50];
	if (flagForButtonPress[0]==1) {
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <blinking_led6+0x44>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d116      	bne.n	8000e24 <blinking_led6+0x3c>
		HAL_UART_Transmit(&huart2, str, sprintf(str, "%d%s", counter, ": Task 6 dispatch\r\n"), 1000);
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <blinking_led6+0x48>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	1d38      	adds	r0, r7, #4
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <blinking_led6+0x4c>)
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <blinking_led6+0x50>)
 8000e00:	f002 f924 	bl	800304c <siprintf>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	1d39      	adds	r1, r7, #4
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <blinking_led6+0x54>)
 8000e10:	f001 ff7f 	bl	8002d12 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8000e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <blinking_led6+0x58>)
 8000e1a:	f000 ff16 	bl	8001c4a <HAL_GPIO_TogglePin>
		flagForButtonPress[0]=0;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <blinking_led6+0x44>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
	}


}
 8000e24:	bf00      	nop
 8000e26:	3738      	adds	r7, #56	; 0x38
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000009c 	.word	0x2000009c
 8000e30:	2000013c 	.word	0x2000013c
 8000e34:	080047a0 	.word	0x080047a0
 8000e38:	08004734 	.word	0x08004734
 8000e3c:	200000f8 	.word	0x200000f8
 8000e40:	40010800 	.word	0x40010800

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fbe4 	bl	8001614 <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Init();
 8000e4c:	f000 f95f 	bl	800110e <SCH_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f846 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f8f6 	bl	8001044 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e58:	f000 f87e 	bl	8000f58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e5c:	f000 f8c8 	bl	8000ff0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <main+0x78>)
 8000e62:	f001 fb75 	bl	8002550 <HAL_TIM_Base_Start_IT>
  SCH_Add_Task(blinking_led, 1, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <main+0x7c>)
 8000e6c:	f000 f964 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(blinking_led1, 2, 50);
 8000e70:	2232      	movs	r2, #50	; 0x32
 8000e72:	2102      	movs	r1, #2
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <main+0x80>)
 8000e76:	f000 f95f 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(blinking_led2, 3, 100);
 8000e7a:	2264      	movs	r2, #100	; 0x64
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <main+0x84>)
 8000e80:	f000 f95a 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(blinking_led3, 4, 150);
 8000e84:	2296      	movs	r2, #150	; 0x96
 8000e86:	2104      	movs	r1, #4
 8000e88:	4810      	ldr	r0, [pc, #64]	; (8000ecc <main+0x88>)
 8000e8a:	f000 f955 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(blinking_led4, 5, 200);
 8000e8e:	22c8      	movs	r2, #200	; 0xc8
 8000e90:	2105      	movs	r1, #5
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <main+0x8c>)
 8000e94:	f000 f950 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(blinking_led5, 6, 250);
 8000e98:	22fa      	movs	r2, #250	; 0xfa
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <main+0x90>)
 8000e9e:	f000 f94b 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(blinking_led6, 7, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <main+0x94>)
 8000ea8:	f000 f946 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 8, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2108      	movs	r1, #8
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <main+0x98>)
 8000eb2:	f000 f941 	bl	8001138 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks () ;
 8000eb6:	f000 f9f9 	bl	80012ac <SCH_Dispatch_Tasks>
 8000eba:	e7fc      	b.n	8000eb6 <main+0x72>
 8000ebc:	200000b0 	.word	0x200000b0
 8000ec0:	08000c2d 	.word	0x08000c2d
 8000ec4:	08000c75 	.word	0x08000c75
 8000ec8:	08000cbd 	.word	0x08000cbd
 8000ecc:	08000d05 	.word	0x08000d05
 8000ed0:	08000d51 	.word	0x08000d51
 8000ed4:	08000d9d 	.word	0x08000d9d
 8000ed8:	08000de9 	.word	0x08000de9
 8000edc:	08000a69 	.word	0x08000a69

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2228      	movs	r2, #40	; 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f8a4 	bl	800303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 feb0 	bl	8001c7c <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f22:	f000 f8ef 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 f91e 	bl	8002180 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 f8db 	bl	8001104 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3740      	adds	r7, #64	; 0x40
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f7e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f8c:	2209      	movs	r2, #9
 8000f8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f9e:	f001 fa87 	bl	80024b0 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa8:	f000 f8ac 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_TIM2_Init+0x94>)
 8000fba:	f001 fc1d 	bl	80027f8 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f000 f89e 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_TIM2_Init+0x94>)
 8000fd6:	f001 fde5 	bl	8002ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f890 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000b0 	.word	0x200000b0

08000ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART2_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ffc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001028:	f001 fe26 	bl	8002c78 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f000 f867 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000f8 	.word	0x200000f8
 8001040:	40004400 	.word	0x40004400

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_GPIO_Init+0x90>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <MX_GPIO_Init+0x90>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_GPIO_Init+0x90>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_GPIO_Init+0x90>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_GPIO_Init+0x90>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_GPIO_Init+0x90>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <MX_GPIO_Init+0x94>)
 8001090:	f000 fdc3 	bl	8001c1a <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_GPIO_Init+0x98>)
 80010aa:	f000 fc23 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80010ae:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 80010b2:	60bb      	str	r3, [r7, #8]
                          |LED4_Pin|LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2302      	movs	r3, #2
 80010be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4619      	mov	r1, r3
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_GPIO_Init+0x94>)
 80010c8:	f000 fc14 	bl	80018f4 <HAL_GPIO_Init>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010800 	.word	0x40010800
 80010dc:	40011000 	.word	0x40011000

080010e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	SCH_Update() ;
 80010e8:	f000 f872 	bl	80011d0 <SCH_Update>
	counter+=10;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	330a      	adds	r3, #10
 80010f2:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000013c 	.word	0x2000013c

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>

0800110e <SCH_Init>:
#include "main.h"
#include "sch.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init ( void ) {
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
	unsigned char i ;
	for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	e006      	b.n	8001128 <SCH_Init+0x1a>
		SCH_Delete_Task( i ) ;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f90f 	bl	8001340 <SCH_Delete_Task>
	for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3301      	adds	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b27      	cmp	r3, #39	; 0x27
 800112c:	d9f5      	bls.n	800111a <SCH_Init+0xc>
	}
	// Reset the global error variable
	// − SCH_Delete_Task () w ill generate an error code ,
	// ( because the task array i s empty)
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <SCH_Add_Task>:

/*−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−*−
SCH_Add_Task () Causes a task ( function ) to be executed at regular inter val s
or aft e r a user−defined delay
−*−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−*/
void SCH_Add_Task( void (* pFunction) () , unsigned int DELAY, unsigned int PERIOD) {
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]
	// F i r st find a gap in the array ( i f there i s one)
	while (( SCH_tasks_G[ Index ] . pTask != 0) && ( Index < SCH_MAX_TASKS) ) {
 8001148:	e002      	b.n	8001150 <SCH_Add_Task+0x18>
		Index++;
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
	while (( SCH_tasks_G[ Index ] . pTask != 0) && ( Index < SCH_MAX_TASKS) ) {
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	491e      	ldr	r1, [pc, #120]	; (80011cc <SCH_Add_Task+0x94>)
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <SCH_Add_Task+0x32>
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b27      	cmp	r3, #39	; 0x27
 8001168:	d9ef      	bls.n	800114a <SCH_Add_Task+0x12>
	}
	// Have we reached the end of the l i s t ?
		if ( Index == SCH_MAX_TASKS) {
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2b28      	cmp	r3, #40	; 0x28
 800116e:	d027      	beq.n	80011c0 <SCH_Add_Task+0x88>
			// Task list is full
			// Also return an error code
			return ;
		}
		//If we’re here , there is a space in the task array
		SCH_tasks_G[ Index ].pTask = pFunction ;
 8001170:	7dfa      	ldrb	r2, [r7, #23]
 8001172:	4916      	ldr	r1, [pc, #88]	; (80011cc <SCH_Add_Task+0x94>)
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[ Index ].Delay = DELAY;
 8001182:	7dfa      	ldrb	r2, [r7, #23]
 8001184:	4911      	ldr	r1, [pc, #68]	; (80011cc <SCH_Add_Task+0x94>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[ Index ].Period = PERIOD;
 8001196:	7dfa      	ldrb	r2, [r7, #23]
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <SCH_Add_Task+0x94>)
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3308      	adds	r3, #8
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[ Index ].RunMe = 0;
 80011aa:	7dfa      	ldrb	r2, [r7, #23]
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <SCH_Add_Task+0x94>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	330c      	adds	r3, #12
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e000      	b.n	80011c2 <SCH_Add_Task+0x8a>
			return ;
 80011c0:	bf00      	nop
		// return position of task ( to allow later deletion )
	}
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000140 	.word	0x20000140

080011d0 <SCH_Update>:

void SCH_Update( void ) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
	unsigned char Index ;
	// NOTE: calculations are in *TICKS* ( not milliseconds )
	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e05c      	b.n	8001296 <SCH_Update+0xc6>
		// Check if there is a task at this location
		if ( SCH_tasks_G[ Index ].pTask) {
 80011dc:	79fa      	ldrb	r2, [r7, #7]
 80011de:	4932      	ldr	r1, [pc, #200]	; (80012a8 <SCH_Update+0xd8>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d04f      	beq.n	8001290 <SCH_Update+0xc0>
			if ( SCH_tasks_G[ Index ].Delay == 0) {
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	492d      	ldr	r1, [pc, #180]	; (80012a8 <SCH_Update+0xd8>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	3304      	adds	r3, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d132      	bne.n	800126c <SCH_Update+0x9c>
				// The task i s due to run
				// Inc . the ’RunMe’ fl a g
				SCH_tasks_G[ Index ].RunMe += 1;
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	4927      	ldr	r1, [pc, #156]	; (80012a8 <SCH_Update+0xd8>)
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	330c      	adds	r3, #12
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	3301      	adds	r3, #1
 800121c:	b2d8      	uxtb	r0, r3
 800121e:	4922      	ldr	r1, [pc, #136]	; (80012a8 <SCH_Update+0xd8>)
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	330c      	adds	r3, #12
 800122c:	4602      	mov	r2, r0
 800122e:	701a      	strb	r2, [r3, #0]
				if ( SCH_tasks_G[ Index ].Period ) {
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	491d      	ldr	r1, [pc, #116]	; (80012a8 <SCH_Update+0xd8>)
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3308      	adds	r3, #8
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d024      	beq.n	8001290 <SCH_Update+0xc0>
					// Schedule periodic tasks to run again
					SCH_tasks_G[ Index ].Delay = SCH_tasks_G[ Index ].Period ;
 8001246:	79f9      	ldrb	r1, [r7, #7]
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	4817      	ldr	r0, [pc, #92]	; (80012a8 <SCH_Update+0xd8>)
 800124c:	460b      	mov	r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4403      	add	r3, r0
 8001256:	3308      	adds	r3, #8
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <SCH_Update+0xd8>)
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4403      	add	r3, r0
 8001266:	3304      	adds	r3, #4
 8001268:	6019      	str	r1, [r3, #0]
 800126a:	e011      	b.n	8001290 <SCH_Update+0xc0>
				}
			}
			else {
			// Not yet ready to run : ju st decrement the delay
			SCH_tasks_G[ Index ].Delay -- ;
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <SCH_Update+0xd8>)
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1e59      	subs	r1, r3, #1
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <SCH_Update+0xd8>)
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4403      	add	r3, r0
 800128c:	3304      	adds	r3, #4
 800128e:	6019      	str	r1, [r3, #0]
	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	3301      	adds	r3, #1
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b27      	cmp	r3, #39	; 0x27
 800129a:	d99f      	bls.n	80011dc <SCH_Update+0xc>
			}
		}
	}
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000140 	.word	0x20000140

080012ac <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks( void ) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	unsigned char Index ;
	// Dispatches ( runs ) the next task ( i f one i s ready )
	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e039      	b.n	800132c <SCH_Dispatch_Tasks+0x80>
		if ( SCH_tasks_G[ Index ].RunMe > 0) {
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	4920      	ldr	r1, [pc, #128]	; (800133c <SCH_Dispatch_Tasks+0x90>)
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	330c      	adds	r3, #12
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d02b      	beq.n	8001326 <SCH_Dispatch_Tasks+0x7a>
			(* SCH_tasks_G[ Index ].pTask) () ; // Run the task
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	491a      	ldr	r1, [pc, #104]	; (800133c <SCH_Dispatch_Tasks+0x90>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4798      	blx	r3
			SCH_tasks_G[ Index ].RunMe--; // Reset / reduce RunMe fl a g
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	4916      	ldr	r1, [pc, #88]	; (800133c <SCH_Dispatch_Tasks+0x90>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	330c      	adds	r3, #12
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	4911      	ldr	r1, [pc, #68]	; (800133c <SCH_Dispatch_Tasks+0x90>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	330c      	adds	r3, #12
 8001304:	4602      	mov	r2, r0
 8001306:	701a      	strb	r2, [r3, #0]
			// Periodic tasks w ill automatically run again
			// − i f thi s i s a ’one shot ’ task , remove i t from the array
			if ( SCH_tasks_G[ Index ] . Period == 0)
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	490c      	ldr	r1, [pc, #48]	; (800133c <SCH_Dispatch_Tasks+0x90>)
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	3308      	adds	r3, #8
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <SCH_Dispatch_Tasks+0x7a>
			{
				SCH_Delete_Task( Index ) ;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f80d 	bl	8001340 <SCH_Delete_Task>
	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	3301      	adds	r3, #1
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b27      	cmp	r3, #39	; 0x27
 8001330:	d9c2      	bls.n	80012b8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000140 	.word	0x20000140

08001340 <SCH_Delete_Task>:

/*−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−*/
void SCH_Delete_Task( int TASK_INDEX) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	SCH_tasks_G[TASK_INDEX ] . pTask = 0x0000 ;
 8001348:	4915      	ldr	r1, [pc, #84]	; (80013a0 <SCH_Delete_Task+0x60>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX ] . Delay = 0;
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <SCH_Delete_Task+0x60>)
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3304      	adds	r3, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX ] . Period = 0;
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <SCH_Delete_Task+0x60>)
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	3308      	adds	r3, #8
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX ] .RunMe = 0;
 8001382:	4907      	ldr	r1, [pc, #28]	; (80013a0 <SCH_Delete_Task+0x60>)
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	330c      	adds	r3, #12
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000140 	.word	0x20000140

080013a4 <setTimer1>:
int timer5_flag=0;
int timer5_counter=0;
int timer6_flag=0;
int timer6_counter=0;

void setTimer1(int duration) {
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <setTimer1+0x20>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <setTimer1+0x24>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000464 	.word	0x20000464
 80013c8:	20000460 	.word	0x20000460

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_MspInit+0x40>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_MspInit+0x40>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_MspInit+0x40>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_MspInit+0x40>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_MspInit+0x40>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_MspInit+0x40>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001420:	d113      	bne.n	800144a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_TIM_Base_MspInit+0x44>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_TIM_Base_MspInit+0x44>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_TIM_Base_MspInit+0x44>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201c      	movs	r0, #28
 8001440:	f000 fa21 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001444:	201c      	movs	r0, #28
 8001446:	f000 fa3a 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0x88>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d12f      	bne.n	80014d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 800147e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001482:	61d3      	str	r3, [r2, #28]
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a8:	2304      	movs	r3, #4
 80014aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_UART_MspInit+0x90>)
 80014bc:	f000 fa1a 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c0:	2308      	movs	r3, #8
 80014c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_UART_MspInit+0x90>)
 80014d4:	f000 fa0e 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f8b5 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM2_IRQHandler+0x10>)
 8001542:	f001 f851 	bl	80025e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000b0 	.word	0x200000b0

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f001 fd32 	bl	8002fe8 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20002800 	.word	0x20002800
 80015b0:	00000400 	.word	0x00000400
 80015b4:	20000468 	.word	0x20000468
 80015b8:	20000480 	.word	0x20000480

080015bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ee:	f7ff ffe5 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f001 fcff 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff fc25 	bl	8000e44 <main>
  bx lr
 80015fa:	4770      	bx	lr
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001604:	08004848 	.word	0x08004848
  ldr r2, =_sbss
 8001608:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800160c:	20000480 	.word	0x20000480

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x28>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f923 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	200f      	movs	r0, #15
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fecc 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f93b 	bl	80018da <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f903 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000
 8001698:	20000008 	.word	0x20000008
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x1c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_IncTick+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_IncTick+0x20>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000008 	.word	0x20000008
 80016c0:	2000046c 	.word	0x2000046c

080016c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_GetTick+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	2000046c 	.word	0x2000046c

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4906      	ldr	r1, [pc, #24]	; (8001770 <__NVIC_EnableIRQ+0x34>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff90 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff2d 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff42 	bl	8001720 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff90 	bl	80017c8 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5f 	bl	8001774 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff35 	bl	800173c <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b08b      	sub	sp, #44	; 0x2c
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	e161      	b.n	8001bcc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001908:	2201      	movs	r2, #1
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8150 	bne.w	8001bc6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a97      	ldr	r2, [pc, #604]	; (8001b88 <HAL_GPIO_Init+0x294>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d05e      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001930:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <HAL_GPIO_Init+0x294>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d875      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001936:	4a95      	ldr	r2, [pc, #596]	; (8001b8c <HAL_GPIO_Init+0x298>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d058      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 800193c:	4a93      	ldr	r2, [pc, #588]	; (8001b8c <HAL_GPIO_Init+0x298>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d86f      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001942:	4a93      	ldr	r2, [pc, #588]	; (8001b90 <HAL_GPIO_Init+0x29c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d052      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001948:	4a91      	ldr	r2, [pc, #580]	; (8001b90 <HAL_GPIO_Init+0x29c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d869      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800194e:	4a91      	ldr	r2, [pc, #580]	; (8001b94 <HAL_GPIO_Init+0x2a0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d04c      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001954:	4a8f      	ldr	r2, [pc, #572]	; (8001b94 <HAL_GPIO_Init+0x2a0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d863      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800195a:	4a8f      	ldr	r2, [pc, #572]	; (8001b98 <HAL_GPIO_Init+0x2a4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d046      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001960:	4a8d      	ldr	r2, [pc, #564]	; (8001b98 <HAL_GPIO_Init+0x2a4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d85d      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d82a      	bhi.n	80019c0 <HAL_GPIO_Init+0xcc>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d859      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <HAL_GPIO_Init+0x80>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019c9 	.word	0x080019c9
 800197c:	080019db 	.word	0x080019db
 8001980:	08001a1d 	.word	0x08001a1d
 8001984:	08001a23 	.word	0x08001a23
 8001988:	08001a23 	.word	0x08001a23
 800198c:	08001a23 	.word	0x08001a23
 8001990:	08001a23 	.word	0x08001a23
 8001994:	08001a23 	.word	0x08001a23
 8001998:	08001a23 	.word	0x08001a23
 800199c:	08001a23 	.word	0x08001a23
 80019a0:	08001a23 	.word	0x08001a23
 80019a4:	08001a23 	.word	0x08001a23
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	08001a23 	.word	0x08001a23
 80019b0:	08001a23 	.word	0x08001a23
 80019b4:	08001a23 	.word	0x08001a23
 80019b8:	080019d1 	.word	0x080019d1
 80019bc:	080019e5 	.word	0x080019e5
 80019c0:	4a76      	ldr	r2, [pc, #472]	; (8001b9c <HAL_GPIO_Init+0x2a8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c6:	e02c      	b.n	8001a22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e029      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	3304      	adds	r3, #4
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e024      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	3308      	adds	r3, #8
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e01f      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	330c      	adds	r3, #12
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e01a      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f6:	2304      	movs	r3, #4
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e013      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	611a      	str	r2, [r3, #16]
          break;
 8001a0e:	e009      	b.n	8001a24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	615a      	str	r2, [r3, #20]
          break;
 8001a1a:	e003      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          break;
 8001a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2bff      	cmp	r3, #255	; 0xff
 8001a28:	d801      	bhi.n	8001a2e <HAL_GPIO_Init+0x13a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <HAL_GPIO_Init+0x13e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2bff      	cmp	r3, #255	; 0xff
 8001a38:	d802      	bhi.n	8001a40 <HAL_GPIO_Init+0x14c>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x152>
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	3b08      	subs	r3, #8
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80a9 	beq.w	8001bc6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_GPIO_Init+0x2ac>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2ac>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_GPIO_Init+0x2ac>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a8c:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a3d      	ldr	r2, [pc, #244]	; (8001ba8 <HAL_GPIO_Init+0x2b4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_GPIO_Init+0x2b8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <HAL_GPIO_Init+0x2bc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_GPIO_Init+0x1d8>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e004      	b.n	8001ad6 <HAL_GPIO_Init+0x1e2>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x1e2>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0x1e2>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	f002 0203 	and.w	r2, r2, #3
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae6:	492f      	ldr	r1, [pc, #188]	; (8001ba4 <HAL_GPIO_Init+0x2b0>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	491d      	ldr	r1, [pc, #116]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4917      	ldr	r1, [pc, #92]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4913      	ldr	r1, [pc, #76]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01f      	beq.n	8001bb8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
 8001b84:	e01f      	b.n	8001bc6 <HAL_GPIO_Init+0x2d2>
 8001b86:	bf00      	nop
 8001b88:	10320000 	.word	0x10320000
 8001b8c:	10310000 	.word	0x10310000
 8001b90:	10220000 	.word	0x10220000
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10120000 	.word	0x10120000
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_GPIO_Init+0x2f4>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	4909      	ldr	r1, [pc, #36]	; (8001be8 <HAL_GPIO_Init+0x2f4>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	3301      	adds	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f47f ae96 	bne.w	8001908 <HAL_GPIO_Init+0x14>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	372c      	adds	r7, #44	; 0x2c
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e001      	b.n	8001c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]
 8001c26:	4613      	mov	r3, r2
 8001c28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c2a:	787b      	ldrb	r3, [r7, #1]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c36:	e003      	b.n	8001c40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	041a      	lsls	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c5c:	887a      	ldrh	r2, [r7, #2]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	041a      	lsls	r2, r3, #16
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e272      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d112      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
 8001cb4:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d10b      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d06c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x12c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d168      	bne.n	8001da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e24c      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x76>
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7a      	ldr	r2, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a77      	ldr	r2, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e01d      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0xbc>
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a71      	ldr	r2, [pc, #452]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fcb4 	bl	80016c4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fcb0 	bl	80016c4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e200      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0xe4>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fca0 	bl	80016c4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fc9c 	bl	80016c4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1ec      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x10c>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1c0      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4939      	ldr	r1, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fc55 	bl	80016c4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fc51 	bl	80016c4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1a1      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4927      	ldr	r1, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fc34 	bl	80016c4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff fc30 	bl	80016c4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e180      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03a      	beq.n	8001f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fc14 	bl	80016c4 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fc10 	bl	80016c4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e160      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 fad8 	bl	8002474 <RCC_Delay>
 8001ec4:	e01c      	b.n	8001f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fbfa 	bl	80016c4 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fbf6 	bl	80016c4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d908      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e146      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	42420000 	.word	0x42420000
 8001ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e9      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a6 	beq.w	800205a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a87      	ldr	r2, [pc, #540]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fbb7 	bl	80016c4 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff fbb3 	bl	80016c4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e103      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x312>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e02d      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x334>
 8001f96:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	e01c      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x356>
 8001fb8:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a60      	ldr	r2, [pc, #384]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e00b      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	4b58      	ldr	r3, [pc, #352]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a57      	ldr	r2, [pc, #348]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d015      	beq.n	800201e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb67 	bl	80016c4 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fb63 	bl	80016c4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0b1      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ee      	beq.n	8001ffa <HAL_RCC_OscConfig+0x37e>
 800201c:	e014      	b.n	8002048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff fb51 	bl	80016c4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff fb4d 	bl	80016c4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e09b      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8087 	beq.w	8002172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d061      	beq.n	8002134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d146      	bne.n	8002106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fb21 	bl	80016c4 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fb1d 	bl	80016c4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e06d      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4921      	ldr	r1, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a19      	ldr	r1, [r3, #32]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	430b      	orrs	r3, r1
 80020d2:	491b      	ldr	r1, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4cc>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff faf1 	bl	80016c4 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff faed 	bl	80016c4 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e03d      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46a>
 8002104:	e035      	b.n	8002172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fada 	bl	80016c4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff fad6 	bl	80016c4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e026      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x498>
 8002132:	e01e      	b.n	8002172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d107      	bne.n	800214c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e019      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
 8002148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x500>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000

08002180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d0      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d910      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0207 	bic.w	r2, r3, #7
 80021aa:	4965      	ldr	r1, [pc, #404]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b8      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	494d      	ldr	r1, [pc, #308]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d040      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d115      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e073      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06b      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4936      	ldr	r1, [pc, #216]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002270:	f7ff fa28 	bl	80016c4 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7ff fa24 	bl	80016c4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e053      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d210      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4922      	ldr	r1, [pc, #136]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e032      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4916      	ldr	r1, [pc, #88]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230e:	f000 f821 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	490a      	ldr	r1, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1cc>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1d0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f986 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000
 8002344:	40021000 	.word	0x40021000
 8002348:	080047c4 	.word	0x080047c4
 800234c:	20000000 	.word	0x20000000
 8002350:	20000004 	.word	0x20000004

08002354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	b490      	push	{r4, r7}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_RCC_GetSysClockFreq+0xac>)
 800235c:	1d3c      	adds	r4, r7, #4
 800235e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002364:	f240 2301 	movw	r3, #513	; 0x201
 8002368:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x40>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x46>
 8002392:	e02b      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002396:	623b      	str	r3, [r7, #32]
      break;
 8002398:	e02b      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3328      	adds	r3, #40	; 0x28
 80023a4:	443b      	add	r3, r7
 80023a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d012      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0c5b      	lsrs	r3, r3, #17
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	3328      	adds	r3, #40	; 0x28
 80023c2:	443b      	add	r3, r7
 80023c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ce:	fb03 f202 	mul.w	r2, r3, r2
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	e004      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	623b      	str	r3, [r7, #32]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ee:	623b      	str	r3, [r7, #32]
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	6a3b      	ldr	r3, [r7, #32]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc90      	pop	{r4, r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	080047b4 	.word	0x080047b4
 8002404:	40021000 	.word	0x40021000
 8002408:	007a1200 	.word	0x007a1200
 800240c:	003d0900 	.word	0x003d0900

08002410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002414:	4b02      	ldr	r3, [pc, #8]	; (8002420 <HAL_RCC_GetHCLKFreq+0x10>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	20000000 	.word	0x20000000

08002424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002428:	f7ff fff2 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	080047d4 	.word	0x080047d4

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002450:	f7ff ffde 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0adb      	lsrs	r3, r3, #11
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	080047d4 	.word	0x080047d4

08002474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <RCC_Delay+0x34>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <RCC_Delay+0x38>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0a5b      	lsrs	r3, r3, #9
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002490:	bf00      	nop
  }
  while (Delay --);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	60fa      	str	r2, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f9      	bne.n	8002490 <RCC_Delay+0x1c>
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20000000 	.word	0x20000000
 80024ac:	10624dd3 	.word	0x10624dd3

080024b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e041      	b.n	8002546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe ff9a 	bl	8001410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3304      	adds	r3, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f000 fa6a 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d001      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e035      	b.n	80025d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_TIM_Base_Start_IT+0x4e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002592:	d004      	beq.n	800259e <HAL_TIM_Base_Start_IT+0x4e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <HAL_TIM_Base_Start_IT+0x94>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b06      	cmp	r3, #6
 80025ae:	d010      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c0:	e007      	b.n	80025d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400

080025e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d122      	bne.n	8002644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b02      	cmp	r3, #2
 800260a:	d11b      	bne.n	8002644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0202 	mvn.w	r2, #2
 8002614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9b1 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f9a4 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f9b3 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d122      	bne.n	8002698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b04      	cmp	r3, #4
 800265e:	d11b      	bne.n	8002698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0204 	mvn.w	r2, #4
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f987 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f97a 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f989 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0208 	mvn.w	r2, #8
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2204      	movs	r2, #4
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f95d 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f950 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f95f 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b10      	cmp	r3, #16
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0210 	mvn.w	r2, #16
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2208      	movs	r2, #8
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f933 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f926 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f935 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0201 	mvn.w	r2, #1
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fcba 	bl	80010e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa67 	bl	8002c66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8f9 	bl	80029b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0220 	mvn.w	r2, #32
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa32 	bl	8002c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x18>
 800280c:	2302      	movs	r3, #2
 800280e:	e0b3      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x180>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800282e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d03e      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xd0>
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	f200 8087 	bhi.w	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	f000 8085 	beq.w	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d87f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d01a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xa2>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d87b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002868:	2b60      	cmp	r3, #96	; 0x60
 800286a:	d050      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x116>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d877      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d03c      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xf6>
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d873      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d058      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x136>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d86f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d064      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x156>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d86b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d060      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x156>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d867      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05c      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x156>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d05a      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002898:	e062      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f000 f95c 	bl	8002b66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	609a      	str	r2, [r3, #8]
      break;
 80028c6:	e04e      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f000 f945 	bl	8002b66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ea:	609a      	str	r2, [r3, #8]
      break;
 80028ec:	e03b      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f8bc 	bl	8002a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2150      	movs	r1, #80	; 0x50
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f913 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 800290c:	e02b      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f8da 	bl	8002ad4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2160      	movs	r1, #96	; 0x60
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f903 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 800292c:	e01b      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	f000 f89c 	bl	8002a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f8f3 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 800294c:	e00b      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f000 f8ea 	bl	8002b32 <TIM_ITRx_SetConfig>
        break;
 800295e:	e002      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002964:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <TIM_Base_SetConfig+0xa8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x28>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x28>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <TIM_Base_SetConfig+0xac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <TIM_Base_SetConfig+0xa8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <TIM_Base_SetConfig+0xac>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <TIM_Base_SetConfig+0xa8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400

08002a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f023 0201 	bic.w	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f023 030a 	bic.w	r3, r3, #10
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 0210 	bic.w	r2, r3, #16
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	031b      	lsls	r3, r3, #12
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	621a      	str	r2, [r3, #32]
}
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 0307 	orr.w	r3, r3, #7
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	021a      	lsls	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	609a      	str	r2, [r3, #8]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e041      	b.n	8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d004      	beq.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10c      	bne.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400

08002c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e03f      	b.n	8002d0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fbda 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f905 	bl	8002ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b08a      	sub	sp, #40	; 0x28
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d17c      	bne.n	8002e2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_UART_Transmit+0x2c>
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e075      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Transmit+0x3e>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e06e      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2221      	movs	r2, #33	; 0x21
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d66:	f7fe fcad 	bl	80016c4 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d108      	bne.n	8002d94 <HAL_UART_Transmit+0x82>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e003      	b.n	8002d9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002da4:	e02a      	b.n	8002dfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f840 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e036      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e007      	b.n	8002dee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1cf      	bne.n	8002da6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f810 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e46:	e02c      	b.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d028      	beq.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e56:	f7fe fc35 	bl	80016c4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d21d      	bcs.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e00f      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d0c3      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f06:	f023 030c 	bic.w	r3, r3, #12
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <UART_SetConfig+0x114>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d103      	bne.n	8002f3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f34:	f7ff fa8a 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	e002      	b.n	8002f42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f7ff fa72 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <UART_SetConfig+0x118>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	0119      	lsls	r1, r3, #4
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <UART_SetConfig+0x118>)
 8002f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2064      	movs	r0, #100	; 0x64
 8002f82:	fb00 f303 	mul.w	r3, r0, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <UART_SetConfig+0x118>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f98:	4419      	add	r1, r3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <UART_SetConfig+0x118>)
 8002fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2064      	movs	r0, #100	; 0x64
 8002fba:	fb00 f303 	mul.w	r3, r0, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a07      	ldr	r2, [pc, #28]	; (8002fe4 <UART_SetConfig+0x118>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	440a      	add	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	51eb851f 	.word	0x51eb851f

08002fe8 <__errno>:
 8002fe8:	4b01      	ldr	r3, [pc, #4]	; (8002ff0 <__errno+0x8>)
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000000c 	.word	0x2000000c

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	4d0c      	ldr	r5, [pc, #48]	; (800302c <__libc_init_array+0x38>)
 8002ffa:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffc:	1b64      	subs	r4, r4, r5
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	f001 fb7e 	bl	8004704 <_init>
 8003008:	2600      	movs	r6, #0
 800300a:	4d0a      	ldr	r5, [pc, #40]	; (8003034 <__libc_init_array+0x40>)
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <__libc_init_array+0x44>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	08004840 	.word	0x08004840
 8003030:	08004840 	.word	0x08004840
 8003034:	08004840 	.word	0x08004840
 8003038:	08004844 	.word	0x08004844

0800303c <memset>:
 800303c:	4603      	mov	r3, r0
 800303e:	4402      	add	r2, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <siprintf>:
 800304c:	b40e      	push	{r1, r2, r3}
 800304e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003052:	b500      	push	{lr}
 8003054:	b09c      	sub	sp, #112	; 0x70
 8003056:	ab1d      	add	r3, sp, #116	; 0x74
 8003058:	9002      	str	r0, [sp, #8]
 800305a:	9006      	str	r0, [sp, #24]
 800305c:	9107      	str	r1, [sp, #28]
 800305e:	9104      	str	r1, [sp, #16]
 8003060:	4808      	ldr	r0, [pc, #32]	; (8003084 <siprintf+0x38>)
 8003062:	4909      	ldr	r1, [pc, #36]	; (8003088 <siprintf+0x3c>)
 8003064:	f853 2b04 	ldr.w	r2, [r3], #4
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	a902      	add	r1, sp, #8
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	f000 f868 	bl	8003144 <_svfiprintf_r>
 8003074:	2200      	movs	r2, #0
 8003076:	9b02      	ldr	r3, [sp, #8]
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	b01c      	add	sp, #112	; 0x70
 800307c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003080:	b003      	add	sp, #12
 8003082:	4770      	bx	lr
 8003084:	2000000c 	.word	0x2000000c
 8003088:	ffff0208 	.word	0xffff0208

0800308c <__ssputs_r>:
 800308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	688e      	ldr	r6, [r1, #8]
 8003092:	4682      	mov	sl, r0
 8003094:	429e      	cmp	r6, r3
 8003096:	460c      	mov	r4, r1
 8003098:	4690      	mov	r8, r2
 800309a:	461f      	mov	r7, r3
 800309c:	d838      	bhi.n	8003110 <__ssputs_r+0x84>
 800309e:	898a      	ldrh	r2, [r1, #12]
 80030a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030a4:	d032      	beq.n	800310c <__ssputs_r+0x80>
 80030a6:	6825      	ldr	r5, [r4, #0]
 80030a8:	6909      	ldr	r1, [r1, #16]
 80030aa:	3301      	adds	r3, #1
 80030ac:	eba5 0901 	sub.w	r9, r5, r1
 80030b0:	6965      	ldr	r5, [r4, #20]
 80030b2:	444b      	add	r3, r9
 80030b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030bc:	106d      	asrs	r5, r5, #1
 80030be:	429d      	cmp	r5, r3
 80030c0:	bf38      	it	cc
 80030c2:	461d      	movcc	r5, r3
 80030c4:	0553      	lsls	r3, r2, #21
 80030c6:	d531      	bpl.n	800312c <__ssputs_r+0xa0>
 80030c8:	4629      	mov	r1, r5
 80030ca:	f000 fb6f 	bl	80037ac <_malloc_r>
 80030ce:	4606      	mov	r6, r0
 80030d0:	b950      	cbnz	r0, 80030e8 <__ssputs_r+0x5c>
 80030d2:	230c      	movs	r3, #12
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	f8ca 3000 	str.w	r3, [sl]
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e2:	81a3      	strh	r3, [r4, #12]
 80030e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e8:	464a      	mov	r2, r9
 80030ea:	6921      	ldr	r1, [r4, #16]
 80030ec:	f000 face 	bl	800368c <memcpy>
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fa:	81a3      	strh	r3, [r4, #12]
 80030fc:	6126      	str	r6, [r4, #16]
 80030fe:	444e      	add	r6, r9
 8003100:	6026      	str	r6, [r4, #0]
 8003102:	463e      	mov	r6, r7
 8003104:	6165      	str	r5, [r4, #20]
 8003106:	eba5 0509 	sub.w	r5, r5, r9
 800310a:	60a5      	str	r5, [r4, #8]
 800310c:	42be      	cmp	r6, r7
 800310e:	d900      	bls.n	8003112 <__ssputs_r+0x86>
 8003110:	463e      	mov	r6, r7
 8003112:	4632      	mov	r2, r6
 8003114:	4641      	mov	r1, r8
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	f000 fac6 	bl	80036a8 <memmove>
 800311c:	68a3      	ldr	r3, [r4, #8]
 800311e:	2000      	movs	r0, #0
 8003120:	1b9b      	subs	r3, r3, r6
 8003122:	60a3      	str	r3, [r4, #8]
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	4433      	add	r3, r6
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	e7db      	b.n	80030e4 <__ssputs_r+0x58>
 800312c:	462a      	mov	r2, r5
 800312e:	f000 fbb1 	bl	8003894 <_realloc_r>
 8003132:	4606      	mov	r6, r0
 8003134:	2800      	cmp	r0, #0
 8003136:	d1e1      	bne.n	80030fc <__ssputs_r+0x70>
 8003138:	4650      	mov	r0, sl
 800313a:	6921      	ldr	r1, [r4, #16]
 800313c:	f000 face 	bl	80036dc <_free_r>
 8003140:	e7c7      	b.n	80030d2 <__ssputs_r+0x46>
	...

08003144 <_svfiprintf_r>:
 8003144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003148:	4698      	mov	r8, r3
 800314a:	898b      	ldrh	r3, [r1, #12]
 800314c:	4607      	mov	r7, r0
 800314e:	061b      	lsls	r3, r3, #24
 8003150:	460d      	mov	r5, r1
 8003152:	4614      	mov	r4, r2
 8003154:	b09d      	sub	sp, #116	; 0x74
 8003156:	d50e      	bpl.n	8003176 <_svfiprintf_r+0x32>
 8003158:	690b      	ldr	r3, [r1, #16]
 800315a:	b963      	cbnz	r3, 8003176 <_svfiprintf_r+0x32>
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	f000 fb25 	bl	80037ac <_malloc_r>
 8003162:	6028      	str	r0, [r5, #0]
 8003164:	6128      	str	r0, [r5, #16]
 8003166:	b920      	cbnz	r0, 8003172 <_svfiprintf_r+0x2e>
 8003168:	230c      	movs	r3, #12
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	e0d1      	b.n	8003316 <_svfiprintf_r+0x1d2>
 8003172:	2340      	movs	r3, #64	; 0x40
 8003174:	616b      	str	r3, [r5, #20]
 8003176:	2300      	movs	r3, #0
 8003178:	9309      	str	r3, [sp, #36]	; 0x24
 800317a:	2320      	movs	r3, #32
 800317c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003180:	2330      	movs	r3, #48	; 0x30
 8003182:	f04f 0901 	mov.w	r9, #1
 8003186:	f8cd 800c 	str.w	r8, [sp, #12]
 800318a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003330 <_svfiprintf_r+0x1ec>
 800318e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003192:	4623      	mov	r3, r4
 8003194:	469a      	mov	sl, r3
 8003196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800319a:	b10a      	cbz	r2, 80031a0 <_svfiprintf_r+0x5c>
 800319c:	2a25      	cmp	r2, #37	; 0x25
 800319e:	d1f9      	bne.n	8003194 <_svfiprintf_r+0x50>
 80031a0:	ebba 0b04 	subs.w	fp, sl, r4
 80031a4:	d00b      	beq.n	80031be <_svfiprintf_r+0x7a>
 80031a6:	465b      	mov	r3, fp
 80031a8:	4622      	mov	r2, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	4638      	mov	r0, r7
 80031ae:	f7ff ff6d 	bl	800308c <__ssputs_r>
 80031b2:	3001      	adds	r0, #1
 80031b4:	f000 80aa 	beq.w	800330c <_svfiprintf_r+0x1c8>
 80031b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031ba:	445a      	add	r2, fp
 80031bc:	9209      	str	r2, [sp, #36]	; 0x24
 80031be:	f89a 3000 	ldrb.w	r3, [sl]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80a2 	beq.w	800330c <_svfiprintf_r+0x1c8>
 80031c8:	2300      	movs	r3, #0
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295
 80031ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031d2:	f10a 0a01 	add.w	sl, sl, #1
 80031d6:	9304      	str	r3, [sp, #16]
 80031d8:	9307      	str	r3, [sp, #28]
 80031da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031de:	931a      	str	r3, [sp, #104]	; 0x68
 80031e0:	4654      	mov	r4, sl
 80031e2:	2205      	movs	r2, #5
 80031e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e8:	4851      	ldr	r0, [pc, #324]	; (8003330 <_svfiprintf_r+0x1ec>)
 80031ea:	f000 fa41 	bl	8003670 <memchr>
 80031ee:	9a04      	ldr	r2, [sp, #16]
 80031f0:	b9d8      	cbnz	r0, 800322a <_svfiprintf_r+0xe6>
 80031f2:	06d0      	lsls	r0, r2, #27
 80031f4:	bf44      	itt	mi
 80031f6:	2320      	movmi	r3, #32
 80031f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031fc:	0711      	lsls	r1, r2, #28
 80031fe:	bf44      	itt	mi
 8003200:	232b      	movmi	r3, #43	; 0x2b
 8003202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003206:	f89a 3000 	ldrb.w	r3, [sl]
 800320a:	2b2a      	cmp	r3, #42	; 0x2a
 800320c:	d015      	beq.n	800323a <_svfiprintf_r+0xf6>
 800320e:	4654      	mov	r4, sl
 8003210:	2000      	movs	r0, #0
 8003212:	f04f 0c0a 	mov.w	ip, #10
 8003216:	9a07      	ldr	r2, [sp, #28]
 8003218:	4621      	mov	r1, r4
 800321a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800321e:	3b30      	subs	r3, #48	; 0x30
 8003220:	2b09      	cmp	r3, #9
 8003222:	d94e      	bls.n	80032c2 <_svfiprintf_r+0x17e>
 8003224:	b1b0      	cbz	r0, 8003254 <_svfiprintf_r+0x110>
 8003226:	9207      	str	r2, [sp, #28]
 8003228:	e014      	b.n	8003254 <_svfiprintf_r+0x110>
 800322a:	eba0 0308 	sub.w	r3, r0, r8
 800322e:	fa09 f303 	lsl.w	r3, r9, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	46a2      	mov	sl, r4
 8003236:	9304      	str	r3, [sp, #16]
 8003238:	e7d2      	b.n	80031e0 <_svfiprintf_r+0x9c>
 800323a:	9b03      	ldr	r3, [sp, #12]
 800323c:	1d19      	adds	r1, r3, #4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	9103      	str	r1, [sp, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	bfbb      	ittet	lt
 8003246:	425b      	neglt	r3, r3
 8003248:	f042 0202 	orrlt.w	r2, r2, #2
 800324c:	9307      	strge	r3, [sp, #28]
 800324e:	9307      	strlt	r3, [sp, #28]
 8003250:	bfb8      	it	lt
 8003252:	9204      	strlt	r2, [sp, #16]
 8003254:	7823      	ldrb	r3, [r4, #0]
 8003256:	2b2e      	cmp	r3, #46	; 0x2e
 8003258:	d10c      	bne.n	8003274 <_svfiprintf_r+0x130>
 800325a:	7863      	ldrb	r3, [r4, #1]
 800325c:	2b2a      	cmp	r3, #42	; 0x2a
 800325e:	d135      	bne.n	80032cc <_svfiprintf_r+0x188>
 8003260:	9b03      	ldr	r3, [sp, #12]
 8003262:	3402      	adds	r4, #2
 8003264:	1d1a      	adds	r2, r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	9203      	str	r2, [sp, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	bfb8      	it	lt
 800326e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003272:	9305      	str	r3, [sp, #20]
 8003274:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003334 <_svfiprintf_r+0x1f0>
 8003278:	2203      	movs	r2, #3
 800327a:	4650      	mov	r0, sl
 800327c:	7821      	ldrb	r1, [r4, #0]
 800327e:	f000 f9f7 	bl	8003670 <memchr>
 8003282:	b140      	cbz	r0, 8003296 <_svfiprintf_r+0x152>
 8003284:	2340      	movs	r3, #64	; 0x40
 8003286:	eba0 000a 	sub.w	r0, r0, sl
 800328a:	fa03 f000 	lsl.w	r0, r3, r0
 800328e:	9b04      	ldr	r3, [sp, #16]
 8003290:	3401      	adds	r4, #1
 8003292:	4303      	orrs	r3, r0
 8003294:	9304      	str	r3, [sp, #16]
 8003296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800329a:	2206      	movs	r2, #6
 800329c:	4826      	ldr	r0, [pc, #152]	; (8003338 <_svfiprintf_r+0x1f4>)
 800329e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032a2:	f000 f9e5 	bl	8003670 <memchr>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d038      	beq.n	800331c <_svfiprintf_r+0x1d8>
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <_svfiprintf_r+0x1f8>)
 80032ac:	bb1b      	cbnz	r3, 80032f6 <_svfiprintf_r+0x1b2>
 80032ae:	9b03      	ldr	r3, [sp, #12]
 80032b0:	3307      	adds	r3, #7
 80032b2:	f023 0307 	bic.w	r3, r3, #7
 80032b6:	3308      	adds	r3, #8
 80032b8:	9303      	str	r3, [sp, #12]
 80032ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032bc:	4433      	add	r3, r6
 80032be:	9309      	str	r3, [sp, #36]	; 0x24
 80032c0:	e767      	b.n	8003192 <_svfiprintf_r+0x4e>
 80032c2:	460c      	mov	r4, r1
 80032c4:	2001      	movs	r0, #1
 80032c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032ca:	e7a5      	b.n	8003218 <_svfiprintf_r+0xd4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	f04f 0c0a 	mov.w	ip, #10
 80032d2:	4619      	mov	r1, r3
 80032d4:	3401      	adds	r4, #1
 80032d6:	9305      	str	r3, [sp, #20]
 80032d8:	4620      	mov	r0, r4
 80032da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032de:	3a30      	subs	r2, #48	; 0x30
 80032e0:	2a09      	cmp	r2, #9
 80032e2:	d903      	bls.n	80032ec <_svfiprintf_r+0x1a8>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0c5      	beq.n	8003274 <_svfiprintf_r+0x130>
 80032e8:	9105      	str	r1, [sp, #20]
 80032ea:	e7c3      	b.n	8003274 <_svfiprintf_r+0x130>
 80032ec:	4604      	mov	r4, r0
 80032ee:	2301      	movs	r3, #1
 80032f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80032f4:	e7f0      	b.n	80032d8 <_svfiprintf_r+0x194>
 80032f6:	ab03      	add	r3, sp, #12
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	462a      	mov	r2, r5
 80032fc:	4638      	mov	r0, r7
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <_svfiprintf_r+0x1fc>)
 8003300:	a904      	add	r1, sp, #16
 8003302:	f3af 8000 	nop.w
 8003306:	1c42      	adds	r2, r0, #1
 8003308:	4606      	mov	r6, r0
 800330a:	d1d6      	bne.n	80032ba <_svfiprintf_r+0x176>
 800330c:	89ab      	ldrh	r3, [r5, #12]
 800330e:	065b      	lsls	r3, r3, #25
 8003310:	f53f af2c 	bmi.w	800316c <_svfiprintf_r+0x28>
 8003314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003316:	b01d      	add	sp, #116	; 0x74
 8003318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331c:	ab03      	add	r3, sp, #12
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	462a      	mov	r2, r5
 8003322:	4638      	mov	r0, r7
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <_svfiprintf_r+0x1fc>)
 8003326:	a904      	add	r1, sp, #16
 8003328:	f000 f87c 	bl	8003424 <_printf_i>
 800332c:	e7eb      	b.n	8003306 <_svfiprintf_r+0x1c2>
 800332e:	bf00      	nop
 8003330:	080047dc 	.word	0x080047dc
 8003334:	080047e2 	.word	0x080047e2
 8003338:	080047e6 	.word	0x080047e6
 800333c:	00000000 	.word	0x00000000
 8003340:	0800308d 	.word	0x0800308d

08003344 <_printf_common>:
 8003344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003348:	4616      	mov	r6, r2
 800334a:	4699      	mov	r9, r3
 800334c:	688a      	ldr	r2, [r1, #8]
 800334e:	690b      	ldr	r3, [r1, #16]
 8003350:	4607      	mov	r7, r0
 8003352:	4293      	cmp	r3, r2
 8003354:	bfb8      	it	lt
 8003356:	4613      	movlt	r3, r2
 8003358:	6033      	str	r3, [r6, #0]
 800335a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800335e:	460c      	mov	r4, r1
 8003360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003364:	b10a      	cbz	r2, 800336a <_printf_common+0x26>
 8003366:	3301      	adds	r3, #1
 8003368:	6033      	str	r3, [r6, #0]
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	0699      	lsls	r1, r3, #26
 800336e:	bf42      	ittt	mi
 8003370:	6833      	ldrmi	r3, [r6, #0]
 8003372:	3302      	addmi	r3, #2
 8003374:	6033      	strmi	r3, [r6, #0]
 8003376:	6825      	ldr	r5, [r4, #0]
 8003378:	f015 0506 	ands.w	r5, r5, #6
 800337c:	d106      	bne.n	800338c <_printf_common+0x48>
 800337e:	f104 0a19 	add.w	sl, r4, #25
 8003382:	68e3      	ldr	r3, [r4, #12]
 8003384:	6832      	ldr	r2, [r6, #0]
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	42ab      	cmp	r3, r5
 800338a:	dc28      	bgt.n	80033de <_printf_common+0x9a>
 800338c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003390:	1e13      	subs	r3, r2, #0
 8003392:	6822      	ldr	r2, [r4, #0]
 8003394:	bf18      	it	ne
 8003396:	2301      	movne	r3, #1
 8003398:	0692      	lsls	r2, r2, #26
 800339a:	d42d      	bmi.n	80033f8 <_printf_common+0xb4>
 800339c:	4649      	mov	r1, r9
 800339e:	4638      	mov	r0, r7
 80033a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a4:	47c0      	blx	r8
 80033a6:	3001      	adds	r0, #1
 80033a8:	d020      	beq.n	80033ec <_printf_common+0xa8>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	68e5      	ldr	r5, [r4, #12]
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf18      	it	ne
 80033b6:	2500      	movne	r5, #0
 80033b8:	6832      	ldr	r2, [r6, #0]
 80033ba:	f04f 0600 	mov.w	r6, #0
 80033be:	68a3      	ldr	r3, [r4, #8]
 80033c0:	bf08      	it	eq
 80033c2:	1aad      	subeq	r5, r5, r2
 80033c4:	6922      	ldr	r2, [r4, #16]
 80033c6:	bf08      	it	eq
 80033c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfc4      	itt	gt
 80033d0:	1a9b      	subgt	r3, r3, r2
 80033d2:	18ed      	addgt	r5, r5, r3
 80033d4:	341a      	adds	r4, #26
 80033d6:	42b5      	cmp	r5, r6
 80033d8:	d11a      	bne.n	8003410 <_printf_common+0xcc>
 80033da:	2000      	movs	r0, #0
 80033dc:	e008      	b.n	80033f0 <_printf_common+0xac>
 80033de:	2301      	movs	r3, #1
 80033e0:	4652      	mov	r2, sl
 80033e2:	4649      	mov	r1, r9
 80033e4:	4638      	mov	r0, r7
 80033e6:	47c0      	blx	r8
 80033e8:	3001      	adds	r0, #1
 80033ea:	d103      	bne.n	80033f4 <_printf_common+0xb0>
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	3501      	adds	r5, #1
 80033f6:	e7c4      	b.n	8003382 <_printf_common+0x3e>
 80033f8:	2030      	movs	r0, #48	; 0x30
 80033fa:	18e1      	adds	r1, r4, r3
 80033fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003406:	4422      	add	r2, r4
 8003408:	3302      	adds	r3, #2
 800340a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800340e:	e7c5      	b.n	800339c <_printf_common+0x58>
 8003410:	2301      	movs	r3, #1
 8003412:	4622      	mov	r2, r4
 8003414:	4649      	mov	r1, r9
 8003416:	4638      	mov	r0, r7
 8003418:	47c0      	blx	r8
 800341a:	3001      	adds	r0, #1
 800341c:	d0e6      	beq.n	80033ec <_printf_common+0xa8>
 800341e:	3601      	adds	r6, #1
 8003420:	e7d9      	b.n	80033d6 <_printf_common+0x92>
	...

08003424 <_printf_i>:
 8003424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	7e0f      	ldrb	r7, [r1, #24]
 800342a:	4691      	mov	r9, r2
 800342c:	2f78      	cmp	r7, #120	; 0x78
 800342e:	4680      	mov	r8, r0
 8003430:	460c      	mov	r4, r1
 8003432:	469a      	mov	sl, r3
 8003434:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800343a:	d807      	bhi.n	800344c <_printf_i+0x28>
 800343c:	2f62      	cmp	r7, #98	; 0x62
 800343e:	d80a      	bhi.n	8003456 <_printf_i+0x32>
 8003440:	2f00      	cmp	r7, #0
 8003442:	f000 80d9 	beq.w	80035f8 <_printf_i+0x1d4>
 8003446:	2f58      	cmp	r7, #88	; 0x58
 8003448:	f000 80a4 	beq.w	8003594 <_printf_i+0x170>
 800344c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003454:	e03a      	b.n	80034cc <_printf_i+0xa8>
 8003456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800345a:	2b15      	cmp	r3, #21
 800345c:	d8f6      	bhi.n	800344c <_printf_i+0x28>
 800345e:	a101      	add	r1, pc, #4	; (adr r1, 8003464 <_printf_i+0x40>)
 8003460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003464:	080034bd 	.word	0x080034bd
 8003468:	080034d1 	.word	0x080034d1
 800346c:	0800344d 	.word	0x0800344d
 8003470:	0800344d 	.word	0x0800344d
 8003474:	0800344d 	.word	0x0800344d
 8003478:	0800344d 	.word	0x0800344d
 800347c:	080034d1 	.word	0x080034d1
 8003480:	0800344d 	.word	0x0800344d
 8003484:	0800344d 	.word	0x0800344d
 8003488:	0800344d 	.word	0x0800344d
 800348c:	0800344d 	.word	0x0800344d
 8003490:	080035df 	.word	0x080035df
 8003494:	08003501 	.word	0x08003501
 8003498:	080035c1 	.word	0x080035c1
 800349c:	0800344d 	.word	0x0800344d
 80034a0:	0800344d 	.word	0x0800344d
 80034a4:	08003601 	.word	0x08003601
 80034a8:	0800344d 	.word	0x0800344d
 80034ac:	08003501 	.word	0x08003501
 80034b0:	0800344d 	.word	0x0800344d
 80034b4:	0800344d 	.word	0x0800344d
 80034b8:	080035c9 	.word	0x080035c9
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	602a      	str	r2, [r5, #0]
 80034c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0a4      	b.n	800361a <_printf_i+0x1f6>
 80034d0:	6820      	ldr	r0, [r4, #0]
 80034d2:	6829      	ldr	r1, [r5, #0]
 80034d4:	0606      	lsls	r6, r0, #24
 80034d6:	f101 0304 	add.w	r3, r1, #4
 80034da:	d50a      	bpl.n	80034f2 <_printf_i+0xce>
 80034dc:	680e      	ldr	r6, [r1, #0]
 80034de:	602b      	str	r3, [r5, #0]
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	da03      	bge.n	80034ec <_printf_i+0xc8>
 80034e4:	232d      	movs	r3, #45	; 0x2d
 80034e6:	4276      	negs	r6, r6
 80034e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ec:	230a      	movs	r3, #10
 80034ee:	485e      	ldr	r0, [pc, #376]	; (8003668 <_printf_i+0x244>)
 80034f0:	e019      	b.n	8003526 <_printf_i+0x102>
 80034f2:	680e      	ldr	r6, [r1, #0]
 80034f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	bf18      	it	ne
 80034fc:	b236      	sxthne	r6, r6
 80034fe:	e7ef      	b.n	80034e0 <_printf_i+0xbc>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	1d19      	adds	r1, r3, #4
 8003506:	6029      	str	r1, [r5, #0]
 8003508:	0601      	lsls	r1, r0, #24
 800350a:	d501      	bpl.n	8003510 <_printf_i+0xec>
 800350c:	681e      	ldr	r6, [r3, #0]
 800350e:	e002      	b.n	8003516 <_printf_i+0xf2>
 8003510:	0646      	lsls	r6, r0, #25
 8003512:	d5fb      	bpl.n	800350c <_printf_i+0xe8>
 8003514:	881e      	ldrh	r6, [r3, #0]
 8003516:	2f6f      	cmp	r7, #111	; 0x6f
 8003518:	bf0c      	ite	eq
 800351a:	2308      	moveq	r3, #8
 800351c:	230a      	movne	r3, #10
 800351e:	4852      	ldr	r0, [pc, #328]	; (8003668 <_printf_i+0x244>)
 8003520:	2100      	movs	r1, #0
 8003522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003526:	6865      	ldr	r5, [r4, #4]
 8003528:	2d00      	cmp	r5, #0
 800352a:	bfa8      	it	ge
 800352c:	6821      	ldrge	r1, [r4, #0]
 800352e:	60a5      	str	r5, [r4, #8]
 8003530:	bfa4      	itt	ge
 8003532:	f021 0104 	bicge.w	r1, r1, #4
 8003536:	6021      	strge	r1, [r4, #0]
 8003538:	b90e      	cbnz	r6, 800353e <_printf_i+0x11a>
 800353a:	2d00      	cmp	r5, #0
 800353c:	d04d      	beq.n	80035da <_printf_i+0x1b6>
 800353e:	4615      	mov	r5, r2
 8003540:	fbb6 f1f3 	udiv	r1, r6, r3
 8003544:	fb03 6711 	mls	r7, r3, r1, r6
 8003548:	5dc7      	ldrb	r7, [r0, r7]
 800354a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800354e:	4637      	mov	r7, r6
 8003550:	42bb      	cmp	r3, r7
 8003552:	460e      	mov	r6, r1
 8003554:	d9f4      	bls.n	8003540 <_printf_i+0x11c>
 8003556:	2b08      	cmp	r3, #8
 8003558:	d10b      	bne.n	8003572 <_printf_i+0x14e>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	07de      	lsls	r6, r3, #31
 800355e:	d508      	bpl.n	8003572 <_printf_i+0x14e>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	6861      	ldr	r1, [r4, #4]
 8003564:	4299      	cmp	r1, r3
 8003566:	bfde      	ittt	le
 8003568:	2330      	movle	r3, #48	; 0x30
 800356a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800356e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003572:	1b52      	subs	r2, r2, r5
 8003574:	6122      	str	r2, [r4, #16]
 8003576:	464b      	mov	r3, r9
 8003578:	4621      	mov	r1, r4
 800357a:	4640      	mov	r0, r8
 800357c:	f8cd a000 	str.w	sl, [sp]
 8003580:	aa03      	add	r2, sp, #12
 8003582:	f7ff fedf 	bl	8003344 <_printf_common>
 8003586:	3001      	adds	r0, #1
 8003588:	d14c      	bne.n	8003624 <_printf_i+0x200>
 800358a:	f04f 30ff 	mov.w	r0, #4294967295
 800358e:	b004      	add	sp, #16
 8003590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003594:	4834      	ldr	r0, [pc, #208]	; (8003668 <_printf_i+0x244>)
 8003596:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800359a:	6829      	ldr	r1, [r5, #0]
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	f851 6b04 	ldr.w	r6, [r1], #4
 80035a2:	6029      	str	r1, [r5, #0]
 80035a4:	061d      	lsls	r5, r3, #24
 80035a6:	d514      	bpl.n	80035d2 <_printf_i+0x1ae>
 80035a8:	07df      	lsls	r7, r3, #31
 80035aa:	bf44      	itt	mi
 80035ac:	f043 0320 	orrmi.w	r3, r3, #32
 80035b0:	6023      	strmi	r3, [r4, #0]
 80035b2:	b91e      	cbnz	r6, 80035bc <_printf_i+0x198>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	f023 0320 	bic.w	r3, r3, #32
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	2310      	movs	r3, #16
 80035be:	e7af      	b.n	8003520 <_printf_i+0xfc>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	f043 0320 	orr.w	r3, r3, #32
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	2378      	movs	r3, #120	; 0x78
 80035ca:	4828      	ldr	r0, [pc, #160]	; (800366c <_printf_i+0x248>)
 80035cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035d0:	e7e3      	b.n	800359a <_printf_i+0x176>
 80035d2:	0659      	lsls	r1, r3, #25
 80035d4:	bf48      	it	mi
 80035d6:	b2b6      	uxthmi	r6, r6
 80035d8:	e7e6      	b.n	80035a8 <_printf_i+0x184>
 80035da:	4615      	mov	r5, r2
 80035dc:	e7bb      	b.n	8003556 <_printf_i+0x132>
 80035de:	682b      	ldr	r3, [r5, #0]
 80035e0:	6826      	ldr	r6, [r4, #0]
 80035e2:	1d18      	adds	r0, r3, #4
 80035e4:	6961      	ldr	r1, [r4, #20]
 80035e6:	6028      	str	r0, [r5, #0]
 80035e8:	0635      	lsls	r5, r6, #24
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	d501      	bpl.n	80035f2 <_printf_i+0x1ce>
 80035ee:	6019      	str	r1, [r3, #0]
 80035f0:	e002      	b.n	80035f8 <_printf_i+0x1d4>
 80035f2:	0670      	lsls	r0, r6, #25
 80035f4:	d5fb      	bpl.n	80035ee <_printf_i+0x1ca>
 80035f6:	8019      	strh	r1, [r3, #0]
 80035f8:	2300      	movs	r3, #0
 80035fa:	4615      	mov	r5, r2
 80035fc:	6123      	str	r3, [r4, #16]
 80035fe:	e7ba      	b.n	8003576 <_printf_i+0x152>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	2100      	movs	r1, #0
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	602a      	str	r2, [r5, #0]
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	6862      	ldr	r2, [r4, #4]
 800360c:	4628      	mov	r0, r5
 800360e:	f000 f82f 	bl	8003670 <memchr>
 8003612:	b108      	cbz	r0, 8003618 <_printf_i+0x1f4>
 8003614:	1b40      	subs	r0, r0, r5
 8003616:	6060      	str	r0, [r4, #4]
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	6123      	str	r3, [r4, #16]
 800361c:	2300      	movs	r3, #0
 800361e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003622:	e7a8      	b.n	8003576 <_printf_i+0x152>
 8003624:	462a      	mov	r2, r5
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	6923      	ldr	r3, [r4, #16]
 800362c:	47d0      	blx	sl
 800362e:	3001      	adds	r0, #1
 8003630:	d0ab      	beq.n	800358a <_printf_i+0x166>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	079b      	lsls	r3, r3, #30
 8003636:	d413      	bmi.n	8003660 <_printf_i+0x23c>
 8003638:	68e0      	ldr	r0, [r4, #12]
 800363a:	9b03      	ldr	r3, [sp, #12]
 800363c:	4298      	cmp	r0, r3
 800363e:	bfb8      	it	lt
 8003640:	4618      	movlt	r0, r3
 8003642:	e7a4      	b.n	800358e <_printf_i+0x16a>
 8003644:	2301      	movs	r3, #1
 8003646:	4632      	mov	r2, r6
 8003648:	4649      	mov	r1, r9
 800364a:	4640      	mov	r0, r8
 800364c:	47d0      	blx	sl
 800364e:	3001      	adds	r0, #1
 8003650:	d09b      	beq.n	800358a <_printf_i+0x166>
 8003652:	3501      	adds	r5, #1
 8003654:	68e3      	ldr	r3, [r4, #12]
 8003656:	9903      	ldr	r1, [sp, #12]
 8003658:	1a5b      	subs	r3, r3, r1
 800365a:	42ab      	cmp	r3, r5
 800365c:	dcf2      	bgt.n	8003644 <_printf_i+0x220>
 800365e:	e7eb      	b.n	8003638 <_printf_i+0x214>
 8003660:	2500      	movs	r5, #0
 8003662:	f104 0619 	add.w	r6, r4, #25
 8003666:	e7f5      	b.n	8003654 <_printf_i+0x230>
 8003668:	080047ed 	.word	0x080047ed
 800366c:	080047fe 	.word	0x080047fe

08003670 <memchr>:
 8003670:	4603      	mov	r3, r0
 8003672:	b510      	push	{r4, lr}
 8003674:	b2c9      	uxtb	r1, r1
 8003676:	4402      	add	r2, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	4618      	mov	r0, r3
 800367c:	d101      	bne.n	8003682 <memchr+0x12>
 800367e:	2000      	movs	r0, #0
 8003680:	e003      	b.n	800368a <memchr+0x1a>
 8003682:	7804      	ldrb	r4, [r0, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	428c      	cmp	r4, r1
 8003688:	d1f6      	bne.n	8003678 <memchr+0x8>
 800368a:	bd10      	pop	{r4, pc}

0800368c <memcpy>:
 800368c:	440a      	add	r2, r1
 800368e:	4291      	cmp	r1, r2
 8003690:	f100 33ff 	add.w	r3, r0, #4294967295
 8003694:	d100      	bne.n	8003698 <memcpy+0xc>
 8003696:	4770      	bx	lr
 8003698:	b510      	push	{r4, lr}
 800369a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800369e:	4291      	cmp	r1, r2
 80036a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036a4:	d1f9      	bne.n	800369a <memcpy+0xe>
 80036a6:	bd10      	pop	{r4, pc}

080036a8 <memmove>:
 80036a8:	4288      	cmp	r0, r1
 80036aa:	b510      	push	{r4, lr}
 80036ac:	eb01 0402 	add.w	r4, r1, r2
 80036b0:	d902      	bls.n	80036b8 <memmove+0x10>
 80036b2:	4284      	cmp	r4, r0
 80036b4:	4623      	mov	r3, r4
 80036b6:	d807      	bhi.n	80036c8 <memmove+0x20>
 80036b8:	1e43      	subs	r3, r0, #1
 80036ba:	42a1      	cmp	r1, r4
 80036bc:	d008      	beq.n	80036d0 <memmove+0x28>
 80036be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036c6:	e7f8      	b.n	80036ba <memmove+0x12>
 80036c8:	4601      	mov	r1, r0
 80036ca:	4402      	add	r2, r0
 80036cc:	428a      	cmp	r2, r1
 80036ce:	d100      	bne.n	80036d2 <memmove+0x2a>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036da:	e7f7      	b.n	80036cc <memmove+0x24>

080036dc <_free_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4605      	mov	r5, r0
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d040      	beq.n	8003766 <_free_r+0x8a>
 80036e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e8:	1f0c      	subs	r4, r1, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfb8      	it	lt
 80036ee:	18e4      	addlt	r4, r4, r3
 80036f0:	f000 f910 	bl	8003914 <__malloc_lock>
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <_free_r+0x8c>)
 80036f6:	6813      	ldr	r3, [r2, #0]
 80036f8:	b933      	cbnz	r3, 8003708 <_free_r+0x2c>
 80036fa:	6063      	str	r3, [r4, #4]
 80036fc:	6014      	str	r4, [r2, #0]
 80036fe:	4628      	mov	r0, r5
 8003700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003704:	f000 b90c 	b.w	8003920 <__malloc_unlock>
 8003708:	42a3      	cmp	r3, r4
 800370a:	d908      	bls.n	800371e <_free_r+0x42>
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	1821      	adds	r1, r4, r0
 8003710:	428b      	cmp	r3, r1
 8003712:	bf01      	itttt	eq
 8003714:	6819      	ldreq	r1, [r3, #0]
 8003716:	685b      	ldreq	r3, [r3, #4]
 8003718:	1809      	addeq	r1, r1, r0
 800371a:	6021      	streq	r1, [r4, #0]
 800371c:	e7ed      	b.n	80036fa <_free_r+0x1e>
 800371e:	461a      	mov	r2, r3
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	b10b      	cbz	r3, 8003728 <_free_r+0x4c>
 8003724:	42a3      	cmp	r3, r4
 8003726:	d9fa      	bls.n	800371e <_free_r+0x42>
 8003728:	6811      	ldr	r1, [r2, #0]
 800372a:	1850      	adds	r0, r2, r1
 800372c:	42a0      	cmp	r0, r4
 800372e:	d10b      	bne.n	8003748 <_free_r+0x6c>
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	4401      	add	r1, r0
 8003734:	1850      	adds	r0, r2, r1
 8003736:	4283      	cmp	r3, r0
 8003738:	6011      	str	r1, [r2, #0]
 800373a:	d1e0      	bne.n	80036fe <_free_r+0x22>
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4401      	add	r1, r0
 8003742:	6011      	str	r1, [r2, #0]
 8003744:	6053      	str	r3, [r2, #4]
 8003746:	e7da      	b.n	80036fe <_free_r+0x22>
 8003748:	d902      	bls.n	8003750 <_free_r+0x74>
 800374a:	230c      	movs	r3, #12
 800374c:	602b      	str	r3, [r5, #0]
 800374e:	e7d6      	b.n	80036fe <_free_r+0x22>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	1821      	adds	r1, r4, r0
 8003754:	428b      	cmp	r3, r1
 8003756:	bf01      	itttt	eq
 8003758:	6819      	ldreq	r1, [r3, #0]
 800375a:	685b      	ldreq	r3, [r3, #4]
 800375c:	1809      	addeq	r1, r1, r0
 800375e:	6021      	streq	r1, [r4, #0]
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6054      	str	r4, [r2, #4]
 8003764:	e7cb      	b.n	80036fe <_free_r+0x22>
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	20000470 	.word	0x20000470

0800376c <sbrk_aligned>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	4e0e      	ldr	r6, [pc, #56]	; (80037a8 <sbrk_aligned+0x3c>)
 8003770:	460c      	mov	r4, r1
 8003772:	6831      	ldr	r1, [r6, #0]
 8003774:	4605      	mov	r5, r0
 8003776:	b911      	cbnz	r1, 800377e <sbrk_aligned+0x12>
 8003778:	f000 f8bc 	bl	80038f4 <_sbrk_r>
 800377c:	6030      	str	r0, [r6, #0]
 800377e:	4621      	mov	r1, r4
 8003780:	4628      	mov	r0, r5
 8003782:	f000 f8b7 	bl	80038f4 <_sbrk_r>
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	d00a      	beq.n	80037a0 <sbrk_aligned+0x34>
 800378a:	1cc4      	adds	r4, r0, #3
 800378c:	f024 0403 	bic.w	r4, r4, #3
 8003790:	42a0      	cmp	r0, r4
 8003792:	d007      	beq.n	80037a4 <sbrk_aligned+0x38>
 8003794:	1a21      	subs	r1, r4, r0
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f8ac 	bl	80038f4 <_sbrk_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d101      	bne.n	80037a4 <sbrk_aligned+0x38>
 80037a0:	f04f 34ff 	mov.w	r4, #4294967295
 80037a4:	4620      	mov	r0, r4
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	20000474 	.word	0x20000474

080037ac <_malloc_r>:
 80037ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b0:	1ccd      	adds	r5, r1, #3
 80037b2:	f025 0503 	bic.w	r5, r5, #3
 80037b6:	3508      	adds	r5, #8
 80037b8:	2d0c      	cmp	r5, #12
 80037ba:	bf38      	it	cc
 80037bc:	250c      	movcc	r5, #12
 80037be:	2d00      	cmp	r5, #0
 80037c0:	4607      	mov	r7, r0
 80037c2:	db01      	blt.n	80037c8 <_malloc_r+0x1c>
 80037c4:	42a9      	cmp	r1, r5
 80037c6:	d905      	bls.n	80037d4 <_malloc_r+0x28>
 80037c8:	230c      	movs	r3, #12
 80037ca:	2600      	movs	r6, #0
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4630      	mov	r0, r6
 80037d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d4:	4e2e      	ldr	r6, [pc, #184]	; (8003890 <_malloc_r+0xe4>)
 80037d6:	f000 f89d 	bl	8003914 <__malloc_lock>
 80037da:	6833      	ldr	r3, [r6, #0]
 80037dc:	461c      	mov	r4, r3
 80037de:	bb34      	cbnz	r4, 800382e <_malloc_r+0x82>
 80037e0:	4629      	mov	r1, r5
 80037e2:	4638      	mov	r0, r7
 80037e4:	f7ff ffc2 	bl	800376c <sbrk_aligned>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	4604      	mov	r4, r0
 80037ec:	d14d      	bne.n	800388a <_malloc_r+0xde>
 80037ee:	6834      	ldr	r4, [r6, #0]
 80037f0:	4626      	mov	r6, r4
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	d140      	bne.n	8003878 <_malloc_r+0xcc>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	4631      	mov	r1, r6
 80037fa:	4638      	mov	r0, r7
 80037fc:	eb04 0803 	add.w	r8, r4, r3
 8003800:	f000 f878 	bl	80038f4 <_sbrk_r>
 8003804:	4580      	cmp	r8, r0
 8003806:	d13a      	bne.n	800387e <_malloc_r+0xd2>
 8003808:	6821      	ldr	r1, [r4, #0]
 800380a:	3503      	adds	r5, #3
 800380c:	1a6d      	subs	r5, r5, r1
 800380e:	f025 0503 	bic.w	r5, r5, #3
 8003812:	3508      	adds	r5, #8
 8003814:	2d0c      	cmp	r5, #12
 8003816:	bf38      	it	cc
 8003818:	250c      	movcc	r5, #12
 800381a:	4638      	mov	r0, r7
 800381c:	4629      	mov	r1, r5
 800381e:	f7ff ffa5 	bl	800376c <sbrk_aligned>
 8003822:	3001      	adds	r0, #1
 8003824:	d02b      	beq.n	800387e <_malloc_r+0xd2>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	442b      	add	r3, r5
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	e00e      	b.n	800384c <_malloc_r+0xa0>
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	1b52      	subs	r2, r2, r5
 8003832:	d41e      	bmi.n	8003872 <_malloc_r+0xc6>
 8003834:	2a0b      	cmp	r2, #11
 8003836:	d916      	bls.n	8003866 <_malloc_r+0xba>
 8003838:	1961      	adds	r1, r4, r5
 800383a:	42a3      	cmp	r3, r4
 800383c:	6025      	str	r5, [r4, #0]
 800383e:	bf18      	it	ne
 8003840:	6059      	strne	r1, [r3, #4]
 8003842:	6863      	ldr	r3, [r4, #4]
 8003844:	bf08      	it	eq
 8003846:	6031      	streq	r1, [r6, #0]
 8003848:	5162      	str	r2, [r4, r5]
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	4638      	mov	r0, r7
 800384e:	f104 060b 	add.w	r6, r4, #11
 8003852:	f000 f865 	bl	8003920 <__malloc_unlock>
 8003856:	f026 0607 	bic.w	r6, r6, #7
 800385a:	1d23      	adds	r3, r4, #4
 800385c:	1af2      	subs	r2, r6, r3
 800385e:	d0b6      	beq.n	80037ce <_malloc_r+0x22>
 8003860:	1b9b      	subs	r3, r3, r6
 8003862:	50a3      	str	r3, [r4, r2]
 8003864:	e7b3      	b.n	80037ce <_malloc_r+0x22>
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	42a3      	cmp	r3, r4
 800386a:	bf0c      	ite	eq
 800386c:	6032      	streq	r2, [r6, #0]
 800386e:	605a      	strne	r2, [r3, #4]
 8003870:	e7ec      	b.n	800384c <_malloc_r+0xa0>
 8003872:	4623      	mov	r3, r4
 8003874:	6864      	ldr	r4, [r4, #4]
 8003876:	e7b2      	b.n	80037de <_malloc_r+0x32>
 8003878:	4634      	mov	r4, r6
 800387a:	6876      	ldr	r6, [r6, #4]
 800387c:	e7b9      	b.n	80037f2 <_malloc_r+0x46>
 800387e:	230c      	movs	r3, #12
 8003880:	4638      	mov	r0, r7
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	f000 f84c 	bl	8003920 <__malloc_unlock>
 8003888:	e7a1      	b.n	80037ce <_malloc_r+0x22>
 800388a:	6025      	str	r5, [r4, #0]
 800388c:	e7de      	b.n	800384c <_malloc_r+0xa0>
 800388e:	bf00      	nop
 8003890:	20000470 	.word	0x20000470

08003894 <_realloc_r>:
 8003894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	4680      	mov	r8, r0
 800389a:	4614      	mov	r4, r2
 800389c:	460e      	mov	r6, r1
 800389e:	b921      	cbnz	r1, 80038aa <_realloc_r+0x16>
 80038a0:	4611      	mov	r1, r2
 80038a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	f7ff bf81 	b.w	80037ac <_malloc_r>
 80038aa:	b92a      	cbnz	r2, 80038b8 <_realloc_r+0x24>
 80038ac:	f7ff ff16 	bl	80036dc <_free_r>
 80038b0:	4625      	mov	r5, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b8:	f000 f838 	bl	800392c <_malloc_usable_size_r>
 80038bc:	4284      	cmp	r4, r0
 80038be:	4607      	mov	r7, r0
 80038c0:	d802      	bhi.n	80038c8 <_realloc_r+0x34>
 80038c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038c6:	d812      	bhi.n	80038ee <_realloc_r+0x5a>
 80038c8:	4621      	mov	r1, r4
 80038ca:	4640      	mov	r0, r8
 80038cc:	f7ff ff6e 	bl	80037ac <_malloc_r>
 80038d0:	4605      	mov	r5, r0
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d0ed      	beq.n	80038b2 <_realloc_r+0x1e>
 80038d6:	42bc      	cmp	r4, r7
 80038d8:	4622      	mov	r2, r4
 80038da:	4631      	mov	r1, r6
 80038dc:	bf28      	it	cs
 80038de:	463a      	movcs	r2, r7
 80038e0:	f7ff fed4 	bl	800368c <memcpy>
 80038e4:	4631      	mov	r1, r6
 80038e6:	4640      	mov	r0, r8
 80038e8:	f7ff fef8 	bl	80036dc <_free_r>
 80038ec:	e7e1      	b.n	80038b2 <_realloc_r+0x1e>
 80038ee:	4635      	mov	r5, r6
 80038f0:	e7df      	b.n	80038b2 <_realloc_r+0x1e>
	...

080038f4 <_sbrk_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	2300      	movs	r3, #0
 80038f8:	4d05      	ldr	r5, [pc, #20]	; (8003910 <_sbrk_r+0x1c>)
 80038fa:	4604      	mov	r4, r0
 80038fc:	4608      	mov	r0, r1
 80038fe:	602b      	str	r3, [r5, #0]
 8003900:	f7fd fe26 	bl	8001550 <_sbrk>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d102      	bne.n	800390e <_sbrk_r+0x1a>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	b103      	cbz	r3, 800390e <_sbrk_r+0x1a>
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	20000478 	.word	0x20000478

08003914 <__malloc_lock>:
 8003914:	4801      	ldr	r0, [pc, #4]	; (800391c <__malloc_lock+0x8>)
 8003916:	f000 b811 	b.w	800393c <__retarget_lock_acquire_recursive>
 800391a:	bf00      	nop
 800391c:	2000047c 	.word	0x2000047c

08003920 <__malloc_unlock>:
 8003920:	4801      	ldr	r0, [pc, #4]	; (8003928 <__malloc_unlock+0x8>)
 8003922:	f000 b80c 	b.w	800393e <__retarget_lock_release_recursive>
 8003926:	bf00      	nop
 8003928:	2000047c 	.word	0x2000047c

0800392c <_malloc_usable_size_r>:
 800392c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003930:	1f18      	subs	r0, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfbc      	itt	lt
 8003936:	580b      	ldrlt	r3, [r1, r0]
 8003938:	18c0      	addlt	r0, r0, r3
 800393a:	4770      	bx	lr

0800393c <__retarget_lock_acquire_recursive>:
 800393c:	4770      	bx	lr

0800393e <__retarget_lock_release_recursive>:
 800393e:	4770      	bx	lr

08003940 <pow>:
 8003940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003944:	4614      	mov	r4, r2
 8003946:	461d      	mov	r5, r3
 8003948:	4680      	mov	r8, r0
 800394a:	4689      	mov	r9, r1
 800394c:	f000 f860 	bl	8003a10 <__ieee754_pow>
 8003950:	4622      	mov	r2, r4
 8003952:	4606      	mov	r6, r0
 8003954:	460f      	mov	r7, r1
 8003956:	462b      	mov	r3, r5
 8003958:	4620      	mov	r0, r4
 800395a:	4629      	mov	r1, r5
 800395c:	f7fd f84e 	bl	80009fc <__aeabi_dcmpun>
 8003960:	bbc8      	cbnz	r0, 80039d6 <pow+0x96>
 8003962:	2200      	movs	r2, #0
 8003964:	2300      	movs	r3, #0
 8003966:	4640      	mov	r0, r8
 8003968:	4649      	mov	r1, r9
 800396a:	f7fd f815 	bl	8000998 <__aeabi_dcmpeq>
 800396e:	b1b8      	cbz	r0, 80039a0 <pow+0x60>
 8003970:	2200      	movs	r2, #0
 8003972:	2300      	movs	r3, #0
 8003974:	4620      	mov	r0, r4
 8003976:	4629      	mov	r1, r5
 8003978:	f7fd f80e 	bl	8000998 <__aeabi_dcmpeq>
 800397c:	2800      	cmp	r0, #0
 800397e:	d141      	bne.n	8003a04 <pow+0xc4>
 8003980:	4620      	mov	r0, r4
 8003982:	4629      	mov	r1, r5
 8003984:	f000 fe39 	bl	80045fa <finite>
 8003988:	b328      	cbz	r0, 80039d6 <pow+0x96>
 800398a:	2200      	movs	r2, #0
 800398c:	2300      	movs	r3, #0
 800398e:	4620      	mov	r0, r4
 8003990:	4629      	mov	r1, r5
 8003992:	f7fd f80b 	bl	80009ac <__aeabi_dcmplt>
 8003996:	b1f0      	cbz	r0, 80039d6 <pow+0x96>
 8003998:	f7ff fb26 	bl	8002fe8 <__errno>
 800399c:	2322      	movs	r3, #34	; 0x22
 800399e:	e019      	b.n	80039d4 <pow+0x94>
 80039a0:	4630      	mov	r0, r6
 80039a2:	4639      	mov	r1, r7
 80039a4:	f000 fe29 	bl	80045fa <finite>
 80039a8:	b9c8      	cbnz	r0, 80039de <pow+0x9e>
 80039aa:	4640      	mov	r0, r8
 80039ac:	4649      	mov	r1, r9
 80039ae:	f000 fe24 	bl	80045fa <finite>
 80039b2:	b1a0      	cbz	r0, 80039de <pow+0x9e>
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f000 fe1f 	bl	80045fa <finite>
 80039bc:	b178      	cbz	r0, 80039de <pow+0x9e>
 80039be:	4632      	mov	r2, r6
 80039c0:	463b      	mov	r3, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	4639      	mov	r1, r7
 80039c6:	f7fd f819 	bl	80009fc <__aeabi_dcmpun>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d0e4      	beq.n	8003998 <pow+0x58>
 80039ce:	f7ff fb0b 	bl	8002fe8 <__errno>
 80039d2:	2321      	movs	r3, #33	; 0x21
 80039d4:	6003      	str	r3, [r0, #0]
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039de:	2200      	movs	r2, #0
 80039e0:	2300      	movs	r3, #0
 80039e2:	4630      	mov	r0, r6
 80039e4:	4639      	mov	r1, r7
 80039e6:	f7fc ffd7 	bl	8000998 <__aeabi_dcmpeq>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d0f3      	beq.n	80039d6 <pow+0x96>
 80039ee:	4640      	mov	r0, r8
 80039f0:	4649      	mov	r1, r9
 80039f2:	f000 fe02 	bl	80045fa <finite>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0ed      	beq.n	80039d6 <pow+0x96>
 80039fa:	4620      	mov	r0, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	f000 fdfc 	bl	80045fa <finite>
 8003a02:	e7c8      	b.n	8003996 <pow+0x56>
 8003a04:	2600      	movs	r6, #0
 8003a06:	4f01      	ldr	r7, [pc, #4]	; (8003a0c <pow+0xcc>)
 8003a08:	e7e5      	b.n	80039d6 <pow+0x96>
 8003a0a:	bf00      	nop
 8003a0c:	3ff00000 	.word	0x3ff00000

08003a10 <__ieee754_pow>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	b093      	sub	sp, #76	; 0x4c
 8003a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a1a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003a1e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003a22:	4689      	mov	r9, r1
 8003a24:	ea56 0102 	orrs.w	r1, r6, r2
 8003a28:	4680      	mov	r8, r0
 8003a2a:	d111      	bne.n	8003a50 <__ieee754_pow+0x40>
 8003a2c:	1803      	adds	r3, r0, r0
 8003a2e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003a32:	4152      	adcs	r2, r2
 8003a34:	4299      	cmp	r1, r3
 8003a36:	4b82      	ldr	r3, [pc, #520]	; (8003c40 <__ieee754_pow+0x230>)
 8003a38:	4193      	sbcs	r3, r2
 8003a3a:	f080 84b9 	bcs.w	80043b0 <__ieee754_pow+0x9a0>
 8003a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	f7fc fb89 	bl	800015c <__adddf3>
 8003a4a:	4683      	mov	fp, r0
 8003a4c:	468c      	mov	ip, r1
 8003a4e:	e06f      	b.n	8003b30 <__ieee754_pow+0x120>
 8003a50:	4b7c      	ldr	r3, [pc, #496]	; (8003c44 <__ieee754_pow+0x234>)
 8003a52:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003a56:	429c      	cmp	r4, r3
 8003a58:	464d      	mov	r5, r9
 8003a5a:	4682      	mov	sl, r0
 8003a5c:	dc06      	bgt.n	8003a6c <__ieee754_pow+0x5c>
 8003a5e:	d101      	bne.n	8003a64 <__ieee754_pow+0x54>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d1ec      	bne.n	8003a3e <__ieee754_pow+0x2e>
 8003a64:	429e      	cmp	r6, r3
 8003a66:	dc01      	bgt.n	8003a6c <__ieee754_pow+0x5c>
 8003a68:	d10f      	bne.n	8003a8a <__ieee754_pow+0x7a>
 8003a6a:	b172      	cbz	r2, 8003a8a <__ieee754_pow+0x7a>
 8003a6c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003a70:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003a74:	ea55 050a 	orrs.w	r5, r5, sl
 8003a78:	d1e1      	bne.n	8003a3e <__ieee754_pow+0x2e>
 8003a7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003a7e:	18db      	adds	r3, r3, r3
 8003a80:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003a84:	4152      	adcs	r2, r2
 8003a86:	429d      	cmp	r5, r3
 8003a88:	e7d5      	b.n	8003a36 <__ieee754_pow+0x26>
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	da39      	bge.n	8003b02 <__ieee754_pow+0xf2>
 8003a8e:	4b6e      	ldr	r3, [pc, #440]	; (8003c48 <__ieee754_pow+0x238>)
 8003a90:	429e      	cmp	r6, r3
 8003a92:	dc52      	bgt.n	8003b3a <__ieee754_pow+0x12a>
 8003a94:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003a98:	429e      	cmp	r6, r3
 8003a9a:	f340 849c 	ble.w	80043d6 <__ieee754_pow+0x9c6>
 8003a9e:	1533      	asrs	r3, r6, #20
 8003aa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003aa4:	2b14      	cmp	r3, #20
 8003aa6:	dd0f      	ble.n	8003ac8 <__ieee754_pow+0xb8>
 8003aa8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003aac:	fa22 f103 	lsr.w	r1, r2, r3
 8003ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f040 848e 	bne.w	80043d6 <__ieee754_pow+0x9c6>
 8003aba:	f001 0101 	and.w	r1, r1, #1
 8003abe:	f1c1 0302 	rsb	r3, r1, #2
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	b182      	cbz	r2, 8003ae8 <__ieee754_pow+0xd8>
 8003ac6:	e05d      	b.n	8003b84 <__ieee754_pow+0x174>
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	d159      	bne.n	8003b80 <__ieee754_pow+0x170>
 8003acc:	f1c3 0314 	rsb	r3, r3, #20
 8003ad0:	fa46 f103 	asr.w	r1, r6, r3
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	42b3      	cmp	r3, r6
 8003ada:	f040 8479 	bne.w	80043d0 <__ieee754_pow+0x9c0>
 8003ade:	f001 0101 	and.w	r1, r1, #1
 8003ae2:	f1c1 0302 	rsb	r3, r1, #2
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <__ieee754_pow+0x23c>)
 8003aea:	429e      	cmp	r6, r3
 8003aec:	d132      	bne.n	8003b54 <__ieee754_pow+0x144>
 8003aee:	2f00      	cmp	r7, #0
 8003af0:	f280 846a 	bge.w	80043c8 <__ieee754_pow+0x9b8>
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	2000      	movs	r0, #0
 8003afa:	4954      	ldr	r1, [pc, #336]	; (8003c4c <__ieee754_pow+0x23c>)
 8003afc:	f7fc fe0e 	bl	800071c <__aeabi_ddiv>
 8003b00:	e7a3      	b.n	8003a4a <__ieee754_pow+0x3a>
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d13c      	bne.n	8003b84 <__ieee754_pow+0x174>
 8003b0a:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <__ieee754_pow+0x234>)
 8003b0c:	429e      	cmp	r6, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <__ieee754_pow+0xd8>
 8003b10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003b14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003b18:	ea53 030a 	orrs.w	r3, r3, sl
 8003b1c:	f000 8448 	beq.w	80043b0 <__ieee754_pow+0x9a0>
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <__ieee754_pow+0x240>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	dd0b      	ble.n	8003b3e <__ieee754_pow+0x12e>
 8003b26:	2f00      	cmp	r7, #0
 8003b28:	f2c0 8448 	blt.w	80043bc <__ieee754_pow+0x9ac>
 8003b2c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003b30:	4658      	mov	r0, fp
 8003b32:	4661      	mov	r1, ip
 8003b34:	b013      	add	sp, #76	; 0x4c
 8003b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e7e2      	b.n	8003b04 <__ieee754_pow+0xf4>
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	f04f 0b00 	mov.w	fp, #0
 8003b44:	f04f 0c00 	mov.w	ip, #0
 8003b48:	daf2      	bge.n	8003b30 <__ieee754_pow+0x120>
 8003b4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003b4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003b52:	e7ed      	b.n	8003b30 <__ieee754_pow+0x120>
 8003b54:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003b58:	d106      	bne.n	8003b68 <__ieee754_pow+0x158>
 8003b5a:	4642      	mov	r2, r8
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	4640      	mov	r0, r8
 8003b60:	4649      	mov	r1, r9
 8003b62:	f7fc fcb1 	bl	80004c8 <__aeabi_dmul>
 8003b66:	e770      	b.n	8003a4a <__ieee754_pow+0x3a>
 8003b68:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <__ieee754_pow+0x244>)
 8003b6a:	429f      	cmp	r7, r3
 8003b6c:	d10a      	bne.n	8003b84 <__ieee754_pow+0x174>
 8003b6e:	2d00      	cmp	r5, #0
 8003b70:	db08      	blt.n	8003b84 <__ieee754_pow+0x174>
 8003b72:	4640      	mov	r0, r8
 8003b74:	4649      	mov	r1, r9
 8003b76:	b013      	add	sp, #76	; 0x4c
 8003b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	f000 bc5e 	b.w	800443c <__ieee754_sqrt>
 8003b80:	2300      	movs	r3, #0
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	4640      	mov	r0, r8
 8003b86:	4649      	mov	r1, r9
 8003b88:	f000 fd34 	bl	80045f4 <fabs>
 8003b8c:	4683      	mov	fp, r0
 8003b8e:	468c      	mov	ip, r1
 8003b90:	f1ba 0f00 	cmp.w	sl, #0
 8003b94:	d128      	bne.n	8003be8 <__ieee754_pow+0x1d8>
 8003b96:	b124      	cbz	r4, 8003ba2 <__ieee754_pow+0x192>
 8003b98:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <__ieee754_pow+0x23c>)
 8003b9a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d122      	bne.n	8003be8 <__ieee754_pow+0x1d8>
 8003ba2:	2f00      	cmp	r7, #0
 8003ba4:	da07      	bge.n	8003bb6 <__ieee754_pow+0x1a6>
 8003ba6:	465a      	mov	r2, fp
 8003ba8:	4663      	mov	r3, ip
 8003baa:	2000      	movs	r0, #0
 8003bac:	4927      	ldr	r1, [pc, #156]	; (8003c4c <__ieee754_pow+0x23c>)
 8003bae:	f7fc fdb5 	bl	800071c <__aeabi_ddiv>
 8003bb2:	4683      	mov	fp, r0
 8003bb4:	468c      	mov	ip, r1
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	daba      	bge.n	8003b30 <__ieee754_pow+0x120>
 8003bba:	9b00      	ldr	r3, [sp, #0]
 8003bbc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003bc0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003bc4:	4323      	orrs	r3, r4
 8003bc6:	d108      	bne.n	8003bda <__ieee754_pow+0x1ca>
 8003bc8:	465a      	mov	r2, fp
 8003bca:	4663      	mov	r3, ip
 8003bcc:	4658      	mov	r0, fp
 8003bce:	4661      	mov	r1, ip
 8003bd0:	f7fc fac2 	bl	8000158 <__aeabi_dsub>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	e790      	b.n	8003afc <__ieee754_pow+0xec>
 8003bda:	9b00      	ldr	r3, [sp, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d1a7      	bne.n	8003b30 <__ieee754_pow+0x120>
 8003be0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003be4:	469c      	mov	ip, r3
 8003be6:	e7a3      	b.n	8003b30 <__ieee754_pow+0x120>
 8003be8:	0feb      	lsrs	r3, r5, #31
 8003bea:	3b01      	subs	r3, #1
 8003bec:	930c      	str	r3, [sp, #48]	; 0x30
 8003bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bf0:	9b00      	ldr	r3, [sp, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d104      	bne.n	8003c00 <__ieee754_pow+0x1f0>
 8003bf6:	4642      	mov	r2, r8
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	e7e7      	b.n	8003bd0 <__ieee754_pow+0x1c0>
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <__ieee754_pow+0x248>)
 8003c02:	429e      	cmp	r6, r3
 8003c04:	f340 80f6 	ble.w	8003df4 <__ieee754_pow+0x3e4>
 8003c08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003c0c:	429e      	cmp	r6, r3
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <__ieee754_pow+0x240>)
 8003c10:	dd09      	ble.n	8003c26 <__ieee754_pow+0x216>
 8003c12:	429c      	cmp	r4, r3
 8003c14:	dc0c      	bgt.n	8003c30 <__ieee754_pow+0x220>
 8003c16:	2f00      	cmp	r7, #0
 8003c18:	da0c      	bge.n	8003c34 <__ieee754_pow+0x224>
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	b013      	add	sp, #76	; 0x4c
 8003c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c22:	f000 bce2 	b.w	80045ea <__math_oflow>
 8003c26:	429c      	cmp	r4, r3
 8003c28:	dbf5      	blt.n	8003c16 <__ieee754_pow+0x206>
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <__ieee754_pow+0x23c>)
 8003c2c:	429c      	cmp	r4, r3
 8003c2e:	dd15      	ble.n	8003c5c <__ieee754_pow+0x24c>
 8003c30:	2f00      	cmp	r7, #0
 8003c32:	dcf2      	bgt.n	8003c1a <__ieee754_pow+0x20a>
 8003c34:	2000      	movs	r0, #0
 8003c36:	b013      	add	sp, #76	; 0x4c
 8003c38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	f000 bcd0 	b.w	80045e0 <__math_uflow>
 8003c40:	fff00000 	.word	0xfff00000
 8003c44:	7ff00000 	.word	0x7ff00000
 8003c48:	433fffff 	.word	0x433fffff
 8003c4c:	3ff00000 	.word	0x3ff00000
 8003c50:	3fefffff 	.word	0x3fefffff
 8003c54:	3fe00000 	.word	0x3fe00000
 8003c58:	41e00000 	.word	0x41e00000
 8003c5c:	4661      	mov	r1, ip
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4658      	mov	r0, fp
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <__ieee754_pow+0x3d0>)
 8003c64:	f7fc fa78 	bl	8000158 <__aeabi_dsub>
 8003c68:	a355      	add	r3, pc, #340	; (adr r3, 8003dc0 <__ieee754_pow+0x3b0>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	4604      	mov	r4, r0
 8003c70:	460d      	mov	r5, r1
 8003c72:	f7fc fc29 	bl	80004c8 <__aeabi_dmul>
 8003c76:	a354      	add	r3, pc, #336	; (adr r3, 8003dc8 <__ieee754_pow+0x3b8>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	460f      	mov	r7, r1
 8003c80:	4620      	mov	r0, r4
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7fc fc20 	bl	80004c8 <__aeabi_dmul>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4682      	mov	sl, r0
 8003c8c:	468b      	mov	fp, r1
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4629      	mov	r1, r5
 8003c92:	4b54      	ldr	r3, [pc, #336]	; (8003de4 <__ieee754_pow+0x3d4>)
 8003c94:	f7fc fc18 	bl	80004c8 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	a14c      	add	r1, pc, #304	; (adr r1, 8003dd0 <__ieee754_pow+0x3c0>)
 8003c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ca2:	f7fc fa59 	bl	8000158 <__aeabi_dsub>
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	f7fc fc0d 	bl	80004c8 <__aeabi_dmul>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	494c      	ldr	r1, [pc, #304]	; (8003de8 <__ieee754_pow+0x3d8>)
 8003cb6:	f7fc fa4f 	bl	8000158 <__aeabi_dsub>
 8003cba:	4622      	mov	r2, r4
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	4680      	mov	r8, r0
 8003cc0:	4689      	mov	r9, r1
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc fbff 	bl	80004c8 <__aeabi_dmul>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4640      	mov	r0, r8
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	f7fc fbf9 	bl	80004c8 <__aeabi_dmul>
 8003cd6:	a340      	add	r3, pc, #256	; (adr r3, 8003dd8 <__ieee754_pow+0x3c8>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fbf4 	bl	80004c8 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	f7fc fa36 	bl	8000158 <__aeabi_dsub>
 8003cec:	f04f 0a00 	mov.w	sl, #0
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	460d      	mov	r5, r1
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	f7fc fa2e 	bl	800015c <__adddf3>
 8003d00:	4632      	mov	r2, r6
 8003d02:	463b      	mov	r3, r7
 8003d04:	4650      	mov	r0, sl
 8003d06:	468b      	mov	fp, r1
 8003d08:	f7fc fa26 	bl	8000158 <__aeabi_dsub>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fa20 	bl	8000158 <__aeabi_dsub>
 8003d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d1c:	9b00      	ldr	r3, [sp, #0]
 8003d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d20:	3b01      	subs	r3, #1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f04f 0600 	mov.w	r6, #0
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	bf0c      	ite	eq
 8003d2e:	4b2f      	ldreq	r3, [pc, #188]	; (8003dec <__ieee754_pow+0x3dc>)
 8003d30:	4b2b      	ldrne	r3, [pc, #172]	; (8003de0 <__ieee754_pow+0x3d0>)
 8003d32:	4604      	mov	r4, r0
 8003d34:	460d      	mov	r5, r1
 8003d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d3a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d3e:	4632      	mov	r2, r6
 8003d40:	463b      	mov	r3, r7
 8003d42:	f7fc fa09 	bl	8000158 <__aeabi_dsub>
 8003d46:	4652      	mov	r2, sl
 8003d48:	465b      	mov	r3, fp
 8003d4a:	f7fc fbbd 	bl	80004c8 <__aeabi_dmul>
 8003d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d52:	4680      	mov	r8, r0
 8003d54:	4689      	mov	r9, r1
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc fbb5 	bl	80004c8 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4640      	mov	r0, r8
 8003d64:	4649      	mov	r1, r9
 8003d66:	f7fc f9f9 	bl	800015c <__adddf3>
 8003d6a:	4632      	mov	r2, r6
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	4680      	mov	r8, r0
 8003d70:	4689      	mov	r9, r1
 8003d72:	4650      	mov	r0, sl
 8003d74:	4659      	mov	r1, fp
 8003d76:	f7fc fba7 	bl	80004c8 <__aeabi_dmul>
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	460d      	mov	r5, r1
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4602      	mov	r2, r0
 8003d82:	4649      	mov	r1, r9
 8003d84:	4640      	mov	r0, r8
 8003d86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003d8a:	f7fc f9e7 	bl	800015c <__adddf3>
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <__ieee754_pow+0x3e0>)
 8003d90:	4682      	mov	sl, r0
 8003d92:	4299      	cmp	r1, r3
 8003d94:	460f      	mov	r7, r1
 8003d96:	460e      	mov	r6, r1
 8003d98:	f340 82e5 	ble.w	8004366 <__ieee754_pow+0x956>
 8003d9c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003da0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003da4:	4303      	orrs	r3, r0
 8003da6:	f000 81df 	beq.w	8004168 <__ieee754_pow+0x758>
 8003daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dae:	2200      	movs	r2, #0
 8003db0:	2300      	movs	r3, #0
 8003db2:	f7fc fdfb 	bl	80009ac <__aeabi_dcmplt>
 8003db6:	3800      	subs	r0, #0
 8003db8:	bf18      	it	ne
 8003dba:	2001      	movne	r0, #1
 8003dbc:	e72e      	b.n	8003c1c <__ieee754_pow+0x20c>
 8003dbe:	bf00      	nop
 8003dc0:	60000000 	.word	0x60000000
 8003dc4:	3ff71547 	.word	0x3ff71547
 8003dc8:	f85ddf44 	.word	0xf85ddf44
 8003dcc:	3e54ae0b 	.word	0x3e54ae0b
 8003dd0:	55555555 	.word	0x55555555
 8003dd4:	3fd55555 	.word	0x3fd55555
 8003dd8:	652b82fe 	.word	0x652b82fe
 8003ddc:	3ff71547 	.word	0x3ff71547
 8003de0:	3ff00000 	.word	0x3ff00000
 8003de4:	3fd00000 	.word	0x3fd00000
 8003de8:	3fe00000 	.word	0x3fe00000
 8003dec:	bff00000 	.word	0xbff00000
 8003df0:	408fffff 	.word	0x408fffff
 8003df4:	4bd2      	ldr	r3, [pc, #840]	; (8004140 <__ieee754_pow+0x730>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	402b      	ands	r3, r5
 8003dfa:	b943      	cbnz	r3, 8003e0e <__ieee754_pow+0x3fe>
 8003dfc:	4658      	mov	r0, fp
 8003dfe:	4661      	mov	r1, ip
 8003e00:	4bd0      	ldr	r3, [pc, #832]	; (8004144 <__ieee754_pow+0x734>)
 8003e02:	f7fc fb61 	bl	80004c8 <__aeabi_dmul>
 8003e06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003e0a:	4683      	mov	fp, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	1523      	asrs	r3, r4, #20
 8003e10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003e14:	4413      	add	r3, r2
 8003e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e18:	4bcb      	ldr	r3, [pc, #812]	; (8004148 <__ieee754_pow+0x738>)
 8003e1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003e1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003e22:	429c      	cmp	r4, r3
 8003e24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003e28:	dd08      	ble.n	8003e3c <__ieee754_pow+0x42c>
 8003e2a:	4bc8      	ldr	r3, [pc, #800]	; (800414c <__ieee754_pow+0x73c>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	f340 8199 	ble.w	8004164 <__ieee754_pow+0x754>
 8003e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e34:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003e38:	3301      	adds	r3, #1
 8003e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	00f3      	lsls	r3, r6, #3
 8003e40:	930d      	str	r3, [sp, #52]	; 0x34
 8003e42:	4bc3      	ldr	r3, [pc, #780]	; (8004150 <__ieee754_pow+0x740>)
 8003e44:	4658      	mov	r0, fp
 8003e46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	461a      	mov	r2, r3
 8003e52:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003e56:	4623      	mov	r3, r4
 8003e58:	f7fc f97e 	bl	8000158 <__aeabi_dsub>
 8003e5c:	46da      	mov	sl, fp
 8003e5e:	462b      	mov	r3, r5
 8003e60:	4652      	mov	r2, sl
 8003e62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003e66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e6a:	f7fc f977 	bl	800015c <__adddf3>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	2000      	movs	r0, #0
 8003e74:	49b7      	ldr	r1, [pc, #732]	; (8004154 <__ieee754_pow+0x744>)
 8003e76:	f7fc fc51 	bl	800071c <__aeabi_ddiv>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e86:	f7fc fb1f 	bl	80004c8 <__aeabi_dmul>
 8003e8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003e92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e96:	2300      	movs	r3, #0
 8003e98:	2200      	movs	r2, #0
 8003e9a:	46ab      	mov	fp, r5
 8003e9c:	106d      	asrs	r5, r5, #1
 8003e9e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003ea2:	9304      	str	r3, [sp, #16]
 8003ea4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003ea8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003eac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	f7fc fb06 	bl	80004c8 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ec4:	f7fc f948 	bl	8000158 <__aeabi_dsub>
 8003ec8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460f      	mov	r7, r1
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f7fc f940 	bl	8000158 <__aeabi_dsub>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4650      	mov	r0, sl
 8003ede:	4659      	mov	r1, fp
 8003ee0:	f7fc f93a 	bl	8000158 <__aeabi_dsub>
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	f7fc faee 	bl	80004c8 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	f7fc f930 	bl	8000158 <__aeabi_dsub>
 8003ef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003efc:	f7fc fae4 	bl	80004c8 <__aeabi_dmul>
 8003f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f7fc fadc 	bl	80004c8 <__aeabi_dmul>
 8003f10:	a379      	add	r3, pc, #484	; (adr r3, 80040f8 <__ieee754_pow+0x6e8>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	4604      	mov	r4, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	f7fc fad5 	bl	80004c8 <__aeabi_dmul>
 8003f1e:	a378      	add	r3, pc, #480	; (adr r3, 8004100 <__ieee754_pow+0x6f0>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc f91a 	bl	800015c <__adddf3>
 8003f28:	4622      	mov	r2, r4
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	f7fc facc 	bl	80004c8 <__aeabi_dmul>
 8003f30:	a375      	add	r3, pc, #468	; (adr r3, 8004108 <__ieee754_pow+0x6f8>)
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f7fc f911 	bl	800015c <__adddf3>
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	f7fc fac3 	bl	80004c8 <__aeabi_dmul>
 8003f42:	a373      	add	r3, pc, #460	; (adr r3, 8004110 <__ieee754_pow+0x700>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f7fc f908 	bl	800015c <__adddf3>
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	462b      	mov	r3, r5
 8003f50:	f7fc faba 	bl	80004c8 <__aeabi_dmul>
 8003f54:	a370      	add	r3, pc, #448	; (adr r3, 8004118 <__ieee754_pow+0x708>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f7fc f8ff 	bl	800015c <__adddf3>
 8003f5e:	4622      	mov	r2, r4
 8003f60:	462b      	mov	r3, r5
 8003f62:	f7fc fab1 	bl	80004c8 <__aeabi_dmul>
 8003f66:	a36e      	add	r3, pc, #440	; (adr r3, 8004120 <__ieee754_pow+0x710>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc f8f6 	bl	800015c <__adddf3>
 8003f70:	4622      	mov	r2, r4
 8003f72:	4606      	mov	r6, r0
 8003f74:	460f      	mov	r7, r1
 8003f76:	462b      	mov	r3, r5
 8003f78:	4620      	mov	r0, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7fc faa4 	bl	80004c8 <__aeabi_dmul>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4630      	mov	r0, r6
 8003f86:	4639      	mov	r1, r7
 8003f88:	f7fc fa9e 	bl	80004c8 <__aeabi_dmul>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	f7fc f8e0 	bl	800015c <__adddf3>
 8003f9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fa0:	f7fc fa92 	bl	80004c8 <__aeabi_dmul>
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	f7fc f8d8 	bl	800015c <__adddf3>
 8003fac:	4642      	mov	r2, r8
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	f7fc fa86 	bl	80004c8 <__aeabi_dmul>
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4b66      	ldr	r3, [pc, #408]	; (8004158 <__ieee754_pow+0x748>)
 8003fc0:	4682      	mov	sl, r0
 8003fc2:	468b      	mov	fp, r1
 8003fc4:	f7fc f8ca 	bl	800015c <__adddf3>
 8003fc8:	4632      	mov	r2, r6
 8003fca:	463b      	mov	r3, r7
 8003fcc:	f7fc f8c6 	bl	800015c <__adddf3>
 8003fd0:	2400      	movs	r4, #0
 8003fd2:	460d      	mov	r5, r1
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	f7fc fa74 	bl	80004c8 <__aeabi_dmul>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4680      	mov	r8, r0
 8003fe4:	4689      	mov	r9, r1
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <__ieee754_pow+0x748>)
 8003fec:	f7fc f8b4 	bl	8000158 <__aeabi_dsub>
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	465b      	mov	r3, fp
 8003ff4:	f7fc f8b0 	bl	8000158 <__aeabi_dsub>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	4639      	mov	r1, r7
 8004000:	f7fc f8aa 	bl	8000158 <__aeabi_dsub>
 8004004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004008:	f7fc fa5e 	bl	80004c8 <__aeabi_dmul>
 800400c:	4622      	mov	r2, r4
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004016:	462b      	mov	r3, r5
 8004018:	f7fc fa56 	bl	80004c8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4630      	mov	r0, r6
 8004022:	4639      	mov	r1, r7
 8004024:	f7fc f89a 	bl	800015c <__adddf3>
 8004028:	2400      	movs	r4, #0
 800402a:	4606      	mov	r6, r0
 800402c:	460f      	mov	r7, r1
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4640      	mov	r0, r8
 8004034:	4649      	mov	r1, r9
 8004036:	f7fc f891 	bl	800015c <__adddf3>
 800403a:	a33b      	add	r3, pc, #236	; (adr r3, 8004128 <__ieee754_pow+0x718>)
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	4620      	mov	r0, r4
 8004042:	460d      	mov	r5, r1
 8004044:	f7fc fa40 	bl	80004c8 <__aeabi_dmul>
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc f880 	bl	8000158 <__aeabi_dsub>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4630      	mov	r0, r6
 800405e:	4639      	mov	r1, r7
 8004060:	f7fc f87a 	bl	8000158 <__aeabi_dsub>
 8004064:	a332      	add	r3, pc, #200	; (adr r3, 8004130 <__ieee754_pow+0x720>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc fa2d 	bl	80004c8 <__aeabi_dmul>
 800406e:	a332      	add	r3, pc, #200	; (adr r3, 8004138 <__ieee754_pow+0x728>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	4606      	mov	r6, r0
 8004076:	460f      	mov	r7, r1
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc fa24 	bl	80004c8 <__aeabi_dmul>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4630      	mov	r0, r6
 8004086:	4639      	mov	r1, r7
 8004088:	f7fc f868 	bl	800015c <__adddf3>
 800408c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800408e:	4b33      	ldr	r3, [pc, #204]	; (800415c <__ieee754_pow+0x74c>)
 8004090:	f04f 0a00 	mov.w	sl, #0
 8004094:	4413      	add	r3, r2
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f7fc f85f 	bl	800015c <__adddf3>
 800409e:	4680      	mov	r8, r0
 80040a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80040a2:	4689      	mov	r9, r1
 80040a4:	f7fc f9a6 	bl	80003f4 <__aeabi_i2d>
 80040a8:	4604      	mov	r4, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80040ae:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <__ieee754_pow+0x750>)
 80040b0:	4413      	add	r3, r2
 80040b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80040b6:	4642      	mov	r2, r8
 80040b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040bc:	464b      	mov	r3, r9
 80040be:	f7fc f84d 	bl	800015c <__adddf3>
 80040c2:	4632      	mov	r2, r6
 80040c4:	463b      	mov	r3, r7
 80040c6:	f7fc f849 	bl	800015c <__adddf3>
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f7fc f845 	bl	800015c <__adddf3>
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	4650      	mov	r0, sl
 80040d8:	468b      	mov	fp, r1
 80040da:	f7fc f83d 	bl	8000158 <__aeabi_dsub>
 80040de:	4632      	mov	r2, r6
 80040e0:	463b      	mov	r3, r7
 80040e2:	f7fc f839 	bl	8000158 <__aeabi_dsub>
 80040e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040ea:	f7fc f835 	bl	8000158 <__aeabi_dsub>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4640      	mov	r0, r8
 80040f4:	4649      	mov	r1, r9
 80040f6:	e60d      	b.n	8003d14 <__ieee754_pow+0x304>
 80040f8:	4a454eef 	.word	0x4a454eef
 80040fc:	3fca7e28 	.word	0x3fca7e28
 8004100:	93c9db65 	.word	0x93c9db65
 8004104:	3fcd864a 	.word	0x3fcd864a
 8004108:	a91d4101 	.word	0xa91d4101
 800410c:	3fd17460 	.word	0x3fd17460
 8004110:	518f264d 	.word	0x518f264d
 8004114:	3fd55555 	.word	0x3fd55555
 8004118:	db6fabff 	.word	0xdb6fabff
 800411c:	3fdb6db6 	.word	0x3fdb6db6
 8004120:	33333303 	.word	0x33333303
 8004124:	3fe33333 	.word	0x3fe33333
 8004128:	e0000000 	.word	0xe0000000
 800412c:	3feec709 	.word	0x3feec709
 8004130:	dc3a03fd 	.word	0xdc3a03fd
 8004134:	3feec709 	.word	0x3feec709
 8004138:	145b01f5 	.word	0x145b01f5
 800413c:	be3e2fe0 	.word	0xbe3e2fe0
 8004140:	7ff00000 	.word	0x7ff00000
 8004144:	43400000 	.word	0x43400000
 8004148:	0003988e 	.word	0x0003988e
 800414c:	000bb679 	.word	0x000bb679
 8004150:	08004810 	.word	0x08004810
 8004154:	3ff00000 	.word	0x3ff00000
 8004158:	40080000 	.word	0x40080000
 800415c:	08004830 	.word	0x08004830
 8004160:	08004820 	.word	0x08004820
 8004164:	2601      	movs	r6, #1
 8004166:	e66a      	b.n	8003e3e <__ieee754_pow+0x42e>
 8004168:	a39d      	add	r3, pc, #628	; (adr r3, 80043e0 <__ieee754_pow+0x9d0>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	4640      	mov	r0, r8
 8004170:	4649      	mov	r1, r9
 8004172:	f7fb fff3 	bl	800015c <__adddf3>
 8004176:	4622      	mov	r2, r4
 8004178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800417c:	462b      	mov	r3, r5
 800417e:	4650      	mov	r0, sl
 8004180:	4639      	mov	r1, r7
 8004182:	f7fb ffe9 	bl	8000158 <__aeabi_dsub>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800418e:	f7fc fc2b 	bl	80009e8 <__aeabi_dcmpgt>
 8004192:	2800      	cmp	r0, #0
 8004194:	f47f ae09 	bne.w	8003daa <__ieee754_pow+0x39a>
 8004198:	4aa3      	ldr	r2, [pc, #652]	; (8004428 <__ieee754_pow+0xa18>)
 800419a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800419e:	4293      	cmp	r3, r2
 80041a0:	f340 8101 	ble.w	80043a6 <__ieee754_pow+0x996>
 80041a4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80041a8:	2000      	movs	r0, #0
 80041aa:	151b      	asrs	r3, r3, #20
 80041ac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80041b0:	fa4a f303 	asr.w	r3, sl, r3
 80041b4:	4433      	add	r3, r6
 80041b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80041ba:	4f9c      	ldr	r7, [pc, #624]	; (800442c <__ieee754_pow+0xa1c>)
 80041bc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80041c0:	4117      	asrs	r7, r2
 80041c2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80041c6:	ea23 0107 	bic.w	r1, r3, r7
 80041ca:	f1c2 0214 	rsb	r2, r2, #20
 80041ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80041d2:	460b      	mov	r3, r1
 80041d4:	fa4a fa02 	asr.w	sl, sl, r2
 80041d8:	2e00      	cmp	r6, #0
 80041da:	4602      	mov	r2, r0
 80041dc:	4629      	mov	r1, r5
 80041de:	4620      	mov	r0, r4
 80041e0:	bfb8      	it	lt
 80041e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80041e6:	f7fb ffb7 	bl	8000158 <__aeabi_dsub>
 80041ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f2:	2400      	movs	r4, #0
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	f7fb ffb0 	bl	800015c <__adddf3>
 80041fc:	a37a      	add	r3, pc, #488	; (adr r3, 80043e8 <__ieee754_pow+0x9d8>)
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	4620      	mov	r0, r4
 8004204:	460d      	mov	r5, r1
 8004206:	f7fc f95f 	bl	80004c8 <__aeabi_dmul>
 800420a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800420e:	4606      	mov	r6, r0
 8004210:	460f      	mov	r7, r1
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fb ff9f 	bl	8000158 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4640      	mov	r0, r8
 8004220:	4649      	mov	r1, r9
 8004222:	f7fb ff99 	bl	8000158 <__aeabi_dsub>
 8004226:	a372      	add	r3, pc, #456	; (adr r3, 80043f0 <__ieee754_pow+0x9e0>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fc f94c 	bl	80004c8 <__aeabi_dmul>
 8004230:	a371      	add	r3, pc, #452	; (adr r3, 80043f8 <__ieee754_pow+0x9e8>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	4680      	mov	r8, r0
 8004238:	4689      	mov	r9, r1
 800423a:	4620      	mov	r0, r4
 800423c:	4629      	mov	r1, r5
 800423e:	f7fc f943 	bl	80004c8 <__aeabi_dmul>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4640      	mov	r0, r8
 8004248:	4649      	mov	r1, r9
 800424a:	f7fb ff87 	bl	800015c <__adddf3>
 800424e:	4604      	mov	r4, r0
 8004250:	460d      	mov	r5, r1
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4630      	mov	r0, r6
 8004258:	4639      	mov	r1, r7
 800425a:	f7fb ff7f 	bl	800015c <__adddf3>
 800425e:	4632      	mov	r2, r6
 8004260:	463b      	mov	r3, r7
 8004262:	4680      	mov	r8, r0
 8004264:	4689      	mov	r9, r1
 8004266:	f7fb ff77 	bl	8000158 <__aeabi_dsub>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4620      	mov	r0, r4
 8004270:	4629      	mov	r1, r5
 8004272:	f7fb ff71 	bl	8000158 <__aeabi_dsub>
 8004276:	4642      	mov	r2, r8
 8004278:	4606      	mov	r6, r0
 800427a:	460f      	mov	r7, r1
 800427c:	464b      	mov	r3, r9
 800427e:	4640      	mov	r0, r8
 8004280:	4649      	mov	r1, r9
 8004282:	f7fc f921 	bl	80004c8 <__aeabi_dmul>
 8004286:	a35e      	add	r3, pc, #376	; (adr r3, 8004400 <__ieee754_pow+0x9f0>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	4604      	mov	r4, r0
 800428e:	460d      	mov	r5, r1
 8004290:	f7fc f91a 	bl	80004c8 <__aeabi_dmul>
 8004294:	a35c      	add	r3, pc, #368	; (adr r3, 8004408 <__ieee754_pow+0x9f8>)
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f7fb ff5d 	bl	8000158 <__aeabi_dsub>
 800429e:	4622      	mov	r2, r4
 80042a0:	462b      	mov	r3, r5
 80042a2:	f7fc f911 	bl	80004c8 <__aeabi_dmul>
 80042a6:	a35a      	add	r3, pc, #360	; (adr r3, 8004410 <__ieee754_pow+0xa00>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f7fb ff56 	bl	800015c <__adddf3>
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	f7fc f908 	bl	80004c8 <__aeabi_dmul>
 80042b8:	a357      	add	r3, pc, #348	; (adr r3, 8004418 <__ieee754_pow+0xa08>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fb ff4b 	bl	8000158 <__aeabi_dsub>
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	f7fc f8ff 	bl	80004c8 <__aeabi_dmul>
 80042ca:	a355      	add	r3, pc, #340	; (adr r3, 8004420 <__ieee754_pow+0xa10>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fb ff44 	bl	800015c <__adddf3>
 80042d4:	4622      	mov	r2, r4
 80042d6:	462b      	mov	r3, r5
 80042d8:	f7fc f8f6 	bl	80004c8 <__aeabi_dmul>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4640      	mov	r0, r8
 80042e2:	4649      	mov	r1, r9
 80042e4:	f7fb ff38 	bl	8000158 <__aeabi_dsub>
 80042e8:	4604      	mov	r4, r0
 80042ea:	460d      	mov	r5, r1
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4640      	mov	r0, r8
 80042f2:	4649      	mov	r1, r9
 80042f4:	f7fc f8e8 	bl	80004c8 <__aeabi_dmul>
 80042f8:	2200      	movs	r2, #0
 80042fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	f7fb ff27 	bl	8000158 <__aeabi_dsub>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004312:	f7fc fa03 	bl	800071c <__aeabi_ddiv>
 8004316:	4632      	mov	r2, r6
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	463b      	mov	r3, r7
 800431e:	4640      	mov	r0, r8
 8004320:	4649      	mov	r1, r9
 8004322:	f7fc f8d1 	bl	80004c8 <__aeabi_dmul>
 8004326:	4632      	mov	r2, r6
 8004328:	463b      	mov	r3, r7
 800432a:	f7fb ff17 	bl	800015c <__adddf3>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4620      	mov	r0, r4
 8004334:	4629      	mov	r1, r5
 8004336:	f7fb ff0f 	bl	8000158 <__aeabi_dsub>
 800433a:	4642      	mov	r2, r8
 800433c:	464b      	mov	r3, r9
 800433e:	f7fb ff0b 	bl	8000158 <__aeabi_dsub>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	2000      	movs	r0, #0
 8004348:	4939      	ldr	r1, [pc, #228]	; (8004430 <__ieee754_pow+0xa20>)
 800434a:	f7fb ff05 	bl	8000158 <__aeabi_dsub>
 800434e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004352:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004356:	da29      	bge.n	80043ac <__ieee754_pow+0x99c>
 8004358:	4652      	mov	r2, sl
 800435a:	f000 f955 	bl	8004608 <scalbn>
 800435e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004362:	f7ff bbfe 	b.w	8003b62 <__ieee754_pow+0x152>
 8004366:	4b33      	ldr	r3, [pc, #204]	; (8004434 <__ieee754_pow+0xa24>)
 8004368:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800436c:	429f      	cmp	r7, r3
 800436e:	f77f af13 	ble.w	8004198 <__ieee754_pow+0x788>
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <__ieee754_pow+0xa28>)
 8004374:	440b      	add	r3, r1
 8004376:	4303      	orrs	r3, r0
 8004378:	d009      	beq.n	800438e <__ieee754_pow+0x97e>
 800437a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800437e:	2200      	movs	r2, #0
 8004380:	2300      	movs	r3, #0
 8004382:	f7fc fb13 	bl	80009ac <__aeabi_dcmplt>
 8004386:	3800      	subs	r0, #0
 8004388:	bf18      	it	ne
 800438a:	2001      	movne	r0, #1
 800438c:	e453      	b.n	8003c36 <__ieee754_pow+0x226>
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	f7fb fee1 	bl	8000158 <__aeabi_dsub>
 8004396:	4642      	mov	r2, r8
 8004398:	464b      	mov	r3, r9
 800439a:	f7fc fb1b 	bl	80009d4 <__aeabi_dcmpge>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f43f aefa 	beq.w	8004198 <__ieee754_pow+0x788>
 80043a4:	e7e9      	b.n	800437a <__ieee754_pow+0x96a>
 80043a6:	f04f 0a00 	mov.w	sl, #0
 80043aa:	e720      	b.n	80041ee <__ieee754_pow+0x7de>
 80043ac:	4621      	mov	r1, r4
 80043ae:	e7d6      	b.n	800435e <__ieee754_pow+0x94e>
 80043b0:	f04f 0b00 	mov.w	fp, #0
 80043b4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004430 <__ieee754_pow+0xa20>
 80043b8:	f7ff bbba 	b.w	8003b30 <__ieee754_pow+0x120>
 80043bc:	f04f 0b00 	mov.w	fp, #0
 80043c0:	f04f 0c00 	mov.w	ip, #0
 80043c4:	f7ff bbb4 	b.w	8003b30 <__ieee754_pow+0x120>
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f7ff bb3d 	b.w	8003a4a <__ieee754_pow+0x3a>
 80043d0:	9200      	str	r2, [sp, #0]
 80043d2:	f7ff bb89 	b.w	8003ae8 <__ieee754_pow+0xd8>
 80043d6:	2300      	movs	r3, #0
 80043d8:	f7ff bb73 	b.w	8003ac2 <__ieee754_pow+0xb2>
 80043dc:	f3af 8000 	nop.w
 80043e0:	652b82fe 	.word	0x652b82fe
 80043e4:	3c971547 	.word	0x3c971547
 80043e8:	00000000 	.word	0x00000000
 80043ec:	3fe62e43 	.word	0x3fe62e43
 80043f0:	fefa39ef 	.word	0xfefa39ef
 80043f4:	3fe62e42 	.word	0x3fe62e42
 80043f8:	0ca86c39 	.word	0x0ca86c39
 80043fc:	be205c61 	.word	0xbe205c61
 8004400:	72bea4d0 	.word	0x72bea4d0
 8004404:	3e663769 	.word	0x3e663769
 8004408:	c5d26bf1 	.word	0xc5d26bf1
 800440c:	3ebbbd41 	.word	0x3ebbbd41
 8004410:	af25de2c 	.word	0xaf25de2c
 8004414:	3f11566a 	.word	0x3f11566a
 8004418:	16bebd93 	.word	0x16bebd93
 800441c:	3f66c16c 	.word	0x3f66c16c
 8004420:	5555553e 	.word	0x5555553e
 8004424:	3fc55555 	.word	0x3fc55555
 8004428:	3fe00000 	.word	0x3fe00000
 800442c:	000fffff 	.word	0x000fffff
 8004430:	3ff00000 	.word	0x3ff00000
 8004434:	4090cbff 	.word	0x4090cbff
 8004438:	3f6f3400 	.word	0x3f6f3400

0800443c <__ieee754_sqrt>:
 800443c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004598 <__ieee754_sqrt+0x15c>
 8004440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004444:	ea3c 0c01 	bics.w	ip, ip, r1
 8004448:	4606      	mov	r6, r0
 800444a:	460d      	mov	r5, r1
 800444c:	460c      	mov	r4, r1
 800444e:	460a      	mov	r2, r1
 8004450:	4607      	mov	r7, r0
 8004452:	4603      	mov	r3, r0
 8004454:	d10f      	bne.n	8004476 <__ieee754_sqrt+0x3a>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	f7fc f835 	bl	80004c8 <__aeabi_dmul>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4630      	mov	r0, r6
 8004464:	4629      	mov	r1, r5
 8004466:	f7fb fe79 	bl	800015c <__adddf3>
 800446a:	4606      	mov	r6, r0
 800446c:	460d      	mov	r5, r1
 800446e:	4630      	mov	r0, r6
 8004470:	4629      	mov	r1, r5
 8004472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004476:	2900      	cmp	r1, #0
 8004478:	dc0e      	bgt.n	8004498 <__ieee754_sqrt+0x5c>
 800447a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800447e:	ea5c 0707 	orrs.w	r7, ip, r7
 8004482:	d0f4      	beq.n	800446e <__ieee754_sqrt+0x32>
 8004484:	b141      	cbz	r1, 8004498 <__ieee754_sqrt+0x5c>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	f7fb fe65 	bl	8000158 <__aeabi_dsub>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	f7fc f943 	bl	800071c <__aeabi_ddiv>
 8004496:	e7e8      	b.n	800446a <__ieee754_sqrt+0x2e>
 8004498:	1521      	asrs	r1, r4, #20
 800449a:	d075      	beq.n	8004588 <__ieee754_sqrt+0x14c>
 800449c:	07cc      	lsls	r4, r1, #31
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80044a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80044aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80044ae:	bf5e      	ittt	pl
 80044b0:	0fd9      	lsrpl	r1, r3, #31
 80044b2:	005b      	lslpl	r3, r3, #1
 80044b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80044b8:	0fd9      	lsrs	r1, r3, #31
 80044ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80044be:	2516      	movs	r5, #22
 80044c0:	4620      	mov	r0, r4
 80044c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044c6:	107f      	asrs	r7, r7, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	1846      	adds	r6, r0, r1
 80044cc:	4296      	cmp	r6, r2
 80044ce:	bfde      	ittt	le
 80044d0:	1b92      	suble	r2, r2, r6
 80044d2:	1870      	addle	r0, r6, r1
 80044d4:	1864      	addle	r4, r4, r1
 80044d6:	0052      	lsls	r2, r2, #1
 80044d8:	3d01      	subs	r5, #1
 80044da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80044de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80044e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80044e6:	d1f0      	bne.n	80044ca <__ieee754_sqrt+0x8e>
 80044e8:	4629      	mov	r1, r5
 80044ea:	f04f 0e20 	mov.w	lr, #32
 80044ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80044f2:	4282      	cmp	r2, r0
 80044f4:	eb06 0c05 	add.w	ip, r6, r5
 80044f8:	dc02      	bgt.n	8004500 <__ieee754_sqrt+0xc4>
 80044fa:	d113      	bne.n	8004524 <__ieee754_sqrt+0xe8>
 80044fc:	459c      	cmp	ip, r3
 80044fe:	d811      	bhi.n	8004524 <__ieee754_sqrt+0xe8>
 8004500:	f1bc 0f00 	cmp.w	ip, #0
 8004504:	eb0c 0506 	add.w	r5, ip, r6
 8004508:	da43      	bge.n	8004592 <__ieee754_sqrt+0x156>
 800450a:	2d00      	cmp	r5, #0
 800450c:	db41      	blt.n	8004592 <__ieee754_sqrt+0x156>
 800450e:	f100 0801 	add.w	r8, r0, #1
 8004512:	1a12      	subs	r2, r2, r0
 8004514:	4640      	mov	r0, r8
 8004516:	459c      	cmp	ip, r3
 8004518:	bf88      	it	hi
 800451a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800451e:	eba3 030c 	sub.w	r3, r3, ip
 8004522:	4431      	add	r1, r6
 8004524:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004528:	f1be 0e01 	subs.w	lr, lr, #1
 800452c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004530:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004534:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004538:	d1db      	bne.n	80044f2 <__ieee754_sqrt+0xb6>
 800453a:	4313      	orrs	r3, r2
 800453c:	d006      	beq.n	800454c <__ieee754_sqrt+0x110>
 800453e:	1c48      	adds	r0, r1, #1
 8004540:	bf0b      	itete	eq
 8004542:	4671      	moveq	r1, lr
 8004544:	3101      	addne	r1, #1
 8004546:	3401      	addeq	r4, #1
 8004548:	f021 0101 	bicne.w	r1, r1, #1
 800454c:	1063      	asrs	r3, r4, #1
 800454e:	0849      	lsrs	r1, r1, #1
 8004550:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004554:	07e2      	lsls	r2, r4, #31
 8004556:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800455a:	bf48      	it	mi
 800455c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004560:	460e      	mov	r6, r1
 8004562:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004566:	e782      	b.n	800446e <__ieee754_sqrt+0x32>
 8004568:	0ada      	lsrs	r2, r3, #11
 800456a:	3815      	subs	r0, #21
 800456c:	055b      	lsls	r3, r3, #21
 800456e:	2a00      	cmp	r2, #0
 8004570:	d0fa      	beq.n	8004568 <__ieee754_sqrt+0x12c>
 8004572:	02d5      	lsls	r5, r2, #11
 8004574:	d50a      	bpl.n	800458c <__ieee754_sqrt+0x150>
 8004576:	f1c1 0420 	rsb	r4, r1, #32
 800457a:	fa23 f404 	lsr.w	r4, r3, r4
 800457e:	1e4d      	subs	r5, r1, #1
 8004580:	408b      	lsls	r3, r1
 8004582:	4322      	orrs	r2, r4
 8004584:	1b41      	subs	r1, r0, r5
 8004586:	e789      	b.n	800449c <__ieee754_sqrt+0x60>
 8004588:	4608      	mov	r0, r1
 800458a:	e7f0      	b.n	800456e <__ieee754_sqrt+0x132>
 800458c:	0052      	lsls	r2, r2, #1
 800458e:	3101      	adds	r1, #1
 8004590:	e7ef      	b.n	8004572 <__ieee754_sqrt+0x136>
 8004592:	4680      	mov	r8, r0
 8004594:	e7bd      	b.n	8004512 <__ieee754_sqrt+0xd6>
 8004596:	bf00      	nop
 8004598:	7ff00000 	.word	0x7ff00000

0800459c <with_errno>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4604      	mov	r4, r0
 80045a0:	460d      	mov	r5, r1
 80045a2:	4616      	mov	r6, r2
 80045a4:	f7fe fd20 	bl	8002fe8 <__errno>
 80045a8:	4629      	mov	r1, r5
 80045aa:	6006      	str	r6, [r0, #0]
 80045ac:	4620      	mov	r0, r4
 80045ae:	bd70      	pop	{r4, r5, r6, pc}

080045b0 <xflow>:
 80045b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045b2:	4615      	mov	r5, r2
 80045b4:	461c      	mov	r4, r3
 80045b6:	b180      	cbz	r0, 80045da <xflow+0x2a>
 80045b8:	4610      	mov	r0, r2
 80045ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80045be:	e9cd 0100 	strd	r0, r1, [sp]
 80045c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045c6:	4628      	mov	r0, r5
 80045c8:	4621      	mov	r1, r4
 80045ca:	f7fb ff7d 	bl	80004c8 <__aeabi_dmul>
 80045ce:	2222      	movs	r2, #34	; 0x22
 80045d0:	b003      	add	sp, #12
 80045d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045d6:	f7ff bfe1 	b.w	800459c <with_errno>
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	e7ee      	b.n	80045be <xflow+0xe>

080045e0 <__math_uflow>:
 80045e0:	2200      	movs	r2, #0
 80045e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045e6:	f7ff bfe3 	b.w	80045b0 <xflow>

080045ea <__math_oflow>:
 80045ea:	2200      	movs	r2, #0
 80045ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80045f0:	f7ff bfde 	b.w	80045b0 <xflow>

080045f4 <fabs>:
 80045f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80045f8:	4770      	bx	lr

080045fa <finite>:
 80045fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80045fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004602:	0fc0      	lsrs	r0, r0, #31
 8004604:	4770      	bx	lr
	...

08004608 <scalbn>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800460e:	4604      	mov	r4, r0
 8004610:	460d      	mov	r5, r1
 8004612:	4617      	mov	r7, r2
 8004614:	460b      	mov	r3, r1
 8004616:	b996      	cbnz	r6, 800463e <scalbn+0x36>
 8004618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800461c:	4303      	orrs	r3, r0
 800461e:	d039      	beq.n	8004694 <scalbn+0x8c>
 8004620:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <scalbn+0xe8>)
 8004622:	2200      	movs	r2, #0
 8004624:	f7fb ff50 	bl	80004c8 <__aeabi_dmul>
 8004628:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <scalbn+0xec>)
 800462a:	4604      	mov	r4, r0
 800462c:	429f      	cmp	r7, r3
 800462e:	460d      	mov	r5, r1
 8004630:	da0f      	bge.n	8004652 <scalbn+0x4a>
 8004632:	a32b      	add	r3, pc, #172	; (adr r3, 80046e0 <scalbn+0xd8>)
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f7fb ff46 	bl	80004c8 <__aeabi_dmul>
 800463c:	e006      	b.n	800464c <scalbn+0x44>
 800463e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004642:	4296      	cmp	r6, r2
 8004644:	d10a      	bne.n	800465c <scalbn+0x54>
 8004646:	4602      	mov	r2, r0
 8004648:	f7fb fd88 	bl	800015c <__adddf3>
 800464c:	4604      	mov	r4, r0
 800464e:	460d      	mov	r5, r1
 8004650:	e020      	b.n	8004694 <scalbn+0x8c>
 8004652:	460b      	mov	r3, r1
 8004654:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004658:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800465c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004660:	19b9      	adds	r1, r7, r6
 8004662:	4291      	cmp	r1, r2
 8004664:	dd0e      	ble.n	8004684 <scalbn+0x7c>
 8004666:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800466a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800466e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004672:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004676:	4820      	ldr	r0, [pc, #128]	; (80046f8 <scalbn+0xf0>)
 8004678:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800467c:	a31a      	add	r3, pc, #104	; (adr r3, 80046e8 <scalbn+0xe0>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	e7d9      	b.n	8004638 <scalbn+0x30>
 8004684:	2900      	cmp	r1, #0
 8004686:	dd08      	ble.n	800469a <scalbn+0x92>
 8004688:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800468c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004690:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004694:	4620      	mov	r0, r4
 8004696:	4629      	mov	r1, r5
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800469e:	da12      	bge.n	80046c6 <scalbn+0xbe>
 80046a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046a4:	429f      	cmp	r7, r3
 80046a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80046aa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80046ae:	dcdc      	bgt.n	800466a <scalbn+0x62>
 80046b0:	a30b      	add	r3, pc, #44	; (adr r3, 80046e0 <scalbn+0xd8>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80046ba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80046be:	480f      	ldr	r0, [pc, #60]	; (80046fc <scalbn+0xf4>)
 80046c0:	f041 011f 	orr.w	r1, r1, #31
 80046c4:	e7b8      	b.n	8004638 <scalbn+0x30>
 80046c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046ca:	3136      	adds	r1, #54	; 0x36
 80046cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80046d4:	4620      	mov	r0, r4
 80046d6:	4629      	mov	r1, r5
 80046d8:	2200      	movs	r2, #0
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <scalbn+0xf8>)
 80046dc:	e7ac      	b.n	8004638 <scalbn+0x30>
 80046de:	bf00      	nop
 80046e0:	c2f8f359 	.word	0xc2f8f359
 80046e4:	01a56e1f 	.word	0x01a56e1f
 80046e8:	8800759c 	.word	0x8800759c
 80046ec:	7e37e43c 	.word	0x7e37e43c
 80046f0:	43500000 	.word	0x43500000
 80046f4:	ffff3cb0 	.word	0xffff3cb0
 80046f8:	8800759c 	.word	0x8800759c
 80046fc:	c2f8f359 	.word	0xc2f8f359
 8004700:	3c900000 	.word	0x3c900000

08004704 <_init>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr

08004710 <_fini>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr
